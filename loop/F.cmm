
==================== Optimised Cmm ====================
section "data" {
    F.g1_closure:
        const GHC.Types.I#_static_info;
        const 0;
}



==================== Optimised Cmm ====================
section "data" {
    F.$wf_closure:
        const F.$wf_info;
}



==================== Optimised Cmm ====================
F.$wf_slow()
        { []
        }
    cpo:
        Sp = Sp + 0;
        jump F.$wf_info ();
}



==================== Optimised Cmm ====================
F.$wf_entry()
        { [const F.$wf_slow-F.$wf_info;, const 484;, const 0;,
   const 262144;, const 0;, const 15;]
        }
    cpH:
        _sn2::I32 = I32[Sp + 0];
        if (_sn2::I32 != 0) goto cpL;
        _cpP::I32 = I32[Sp + 8] + I32[Sp + 12];
        R1 = _cpP::I32;
        Sp = Sp + 16;
        jump (I32[Sp + 0]) ();
    cpL:
        _sop::I32 = I32[Sp + 4] * 5;
        _sok::I32 = I32[Sp + 12] + _sop::I32;
        _soo::I32 = I32[Sp + 8] + _sn2::I32;
        _son::I32 = _soo::I32 + 1;
        _som::I32 = I32[Sp + 4] - 1;
        _sol::I32 = _sn2::I32 - 1;
        I32[Sp + 12] = _sok::I32;
        I32[Sp + 8] = _son::I32;
        I32[Sp + 4] = _som::I32;
        I32[Sp + 0] = _sol::I32;
        jump F.$wf_info ();
}



==================== Optimised Cmm ====================
section "data" {
    F.f_closure:
        const F.f_info;
}



==================== Optimised Cmm ====================
snx_ret()
        { [const 0;, const 32;]
        }
    csx:
        Hp = Hp + 8;
        if (Hp > I32[BaseReg + 92]) goto csD;
        I32[Hp - 4] = GHC.Types.I#_con_info;
        I32[Hp + 0] = R1;
        R1 = Hp - 3;
        Sp = Sp + 4;
        jump (I32[Sp + 0]) ();
    csE: jump stg_gc_unbx_r1 ();
    csD:
        I32[BaseReg + 112] = 8;
        goto csE;
}



==================== Optimised Cmm ====================
sov_ret()
        { [const 227;, const 32;]
        }
    ctY:
        I32[Sp + 0] = I32[Sp + 8];
        I32[Sp + 8] = I32[R1 + 3];
        I32[Sp - 4] = I32[Sp + 4];
        I32[Sp + 4] = I32[Sp + 12];
        I32[Sp + 12] = snx_info;
        Sp = Sp - 4;
        jump F.$wf_info ();
}



==================== Optimised Cmm ====================
sow_ret()
        { [const 99;, const 32;]
        }
    cv8:
        _cvb::I32 = I32[Sp + 12];
        I32[Sp + 12] = I32[R1 + 3];
        R1 = _cvb::I32;
        I32[Sp + 0] = sov_info;
        if (R1 & 3 != 0) goto cvd;
        jump I32[R1] ();
    cvd: jump sov_info ();
}



==================== Optimised Cmm ====================
sox_ret()
        { [const 35;, const 32;]
        }
    cwd:
        _cwg::I32 = I32[Sp + 8];
        I32[Sp + 8] = I32[R1 + 3];
        R1 = _cwg::I32;
        I32[Sp + 0] = sow_info;
        if (R1 & 3 != 0) goto cwi;
        jump I32[R1] ();
    cwi: jump sow_info ();
}



==================== Optimised Cmm ====================
soy_ret()
        { [const 3;, const 32;]
        }
    cxi:
        _cxl::I32 = I32[Sp + 4];
        I32[Sp + 4] = I32[R1 + 3];
        R1 = _cxl::I32;
        I32[Sp + 0] = sox_info;
        if (R1 & 3 != 0) goto cxn;
        jump I32[R1] ();
    cxn: jump sox_info ();
}



==================== Optimised Cmm ====================
F.f_entry()
        { [const 262165;, const 0;, const 15;]
        }
    cyn:
        if (Sp - 4 < I32[BaseReg + 84]) goto cyp;
        R1 = I32[Sp + 0];
        I32[Sp + 0] = soy_info;
        if (R1 & 3 != 0) goto cys;
        jump I32[R1] ();
    cyp:
        R1 = F.f_closure;
        jump (I32[BaseReg - 4]) ();
    cys: jump soy_info ();
}



==================== Optimised Cmm ====================
section "data" {
    F.g_closure:
        const F.g_info;
}



==================== Optimised Cmm ====================
snE_ret()
        { [const 0;, const 32;]
        }
    cA0:
        Hp = Hp + 8;
        if (Hp > I32[BaseReg + 92]) goto cA6;
        I32[Hp - 4] = GHC.Types.I#_con_info;
        I32[Hp + 0] = R1;
        R1 = Hp - 3;
        Sp = Sp + 4;
        jump (I32[Sp + 0]) ();
    cA7: jump stg_gc_unbx_r1 ();
    cA6:
        I32[BaseReg + 112] = 8;
        goto cA7;
}



==================== Optimised Cmm ====================
soI_ret()
        { [const 0;, const 32;]
        }
    cBr:
        I32[Sp - 4] = 0;
        I32[Sp - 8] = 0;
        I32[Sp - 12] = I32[R1 + 3];
        I32[Sp - 16] = I32[R1 + 3];
        I32[Sp + 0] = snE_info;
        Sp = Sp - 16;
        jump F.$wf_info ();
}



==================== Optimised Cmm ====================
F.g_entry()
        { [const 65541;, const 0;, const 15;]
        }
    cCl:
        if (Sp - 16 < I32[BaseReg + 84]) goto cCn;
        R1 = I32[Sp + 0];
        I32[Sp + 0] = soI_info;
        if (R1 & 3 != 0) goto cCq;
        jump I32[R1] ();
    cCn:
        R1 = F.g_closure;
        jump (I32[BaseReg - 4]) ();
    cCq: jump soI_info ();
}



==================== Optimised Cmm ====================
section "data" {
    F.$wff_closure:
        const F.$wff_info;
}



==================== Optimised Cmm ====================
F.$wff_entry()
        { [const 196621;, const 0;, const 15;]
        }
    cDR:
        _snK::I32 = I32[Sp + 0];
        if (_snK::I32 != 0) goto cDV;
        _cDZ::I32 = I32[Sp + 4] + I32[Sp + 8];
        R1 = _cDZ::I32;
        Sp = Sp + 12;
        jump (I32[Sp + 0]) ();
    cDV:
        _soT::I32 = _snK::I32 * 5;
        _soP::I32 = I32[Sp + 8] + _soT::I32;
        _soS::I32 = I32[Sp + 4] + _snK::I32;
        _soR::I32 = _soS::I32 + 1;
        _soQ::I32 = _snK::I32 - 1;
        I32[Sp + 8] = _soP::I32;
        I32[Sp + 4] = _soR::I32;
        I32[Sp + 0] = _soQ::I32;
        jump F.$wff_info ();
}



==================== Optimised Cmm ====================
section "data" {
    F.ff_closure:
        const F.ff_info;
}



==================== Optimised Cmm ====================
so8_ret()
        { [const 0;, const 32;]
        }
    cGh:
        Hp = Hp + 8;
        if (Hp > I32[BaseReg + 92]) goto cGn;
        I32[Hp - 4] = GHC.Types.I#_con_info;
        I32[Hp + 0] = R1;
        R1 = Hp - 3;
        Sp = Sp + 4;
        jump (I32[Sp + 0]) ();
    cGo: jump stg_gc_unbx_r1 ();
    cGn:
        I32[BaseReg + 112] = 8;
        goto cGo;
}



==================== Optimised Cmm ====================
soY_ret()
        { [const 98;, const 32;]
        }
    cHI:
        I32[Sp + 0] = I32[Sp + 8];
        I32[Sp - 4] = I32[Sp + 4];
        I32[Sp + 4] = I32[R1 + 3];
        I32[Sp + 8] = so8_info;
        Sp = Sp - 4;
        jump F.$wff_info ();
}



==================== Optimised Cmm ====================
soZ_ret()
        { [const 34;, const 32;]
        }
    cIG:
        _cIJ::I32 = I32[Sp + 8];
        I32[Sp + 8] = I32[R1 + 3];
        R1 = _cIJ::I32;
        I32[Sp + 0] = soY_info;
        if (R1 & 3 != 0) goto cIL;
        jump I32[R1] ();
    cIL: jump soY_info ();
}



==================== Optimised Cmm ====================
sp0_ret()
        { [const 2;, const 32;]
        }
    cJL:
        _cJO::I32 = I32[Sp + 4];
        I32[Sp + 4] = I32[R1 + 3];
        R1 = _cJO::I32;
        I32[Sp + 0] = soZ_info;
        if (R1 & 3 != 0) goto cJQ;
        jump I32[R1] ();
    cJQ: jump soZ_info ();
}



==================== Optimised Cmm ====================
F.ff_entry()
        { [const 196628;, const 0;, const 15;]
        }
    cKQ:
        if (Sp - 4 < I32[BaseReg + 84]) goto cKS;
        R1 = I32[Sp + 0];
        I32[Sp + 0] = sp0_info;
        if (R1 & 3 != 0) goto cKV;
        jump I32[R1] ();
    cKS:
        R1 = F.ff_closure;
        jump (I32[BaseReg - 4]) ();
    cKV: jump sp0_info ();
}



==================== Optimised Cmm ====================
section "data" {
    F.gg_closure:
        const F.gg_info;
}



==================== Optimised Cmm ====================
sof_ret()
        { [const 0;, const 32;]
        }
    cMt:
        Hp = Hp + 8;
        if (Hp > I32[BaseReg + 92]) goto cMz;
        I32[Hp - 4] = GHC.Types.I#_con_info;
        I32[Hp + 0] = R1;
        R1 = Hp - 3;
        Sp = Sp + 4;
        jump (I32[Sp + 0]) ();
    cMA: jump stg_gc_unbx_r1 ();
    cMz:
        I32[BaseReg + 112] = 8;
        goto cMA;
}



==================== Optimised Cmm ====================
sp9_ret()
        { [const 0;, const 32;]
        }
    cNU:
        I32[Sp - 4] = 0;
        I32[Sp - 8] = 0;
        I32[Sp - 12] = I32[R1 + 3];
        I32[Sp + 0] = sof_info;
        Sp = Sp - 12;
        jump F.$wff_info ();
}



==================== Optimised Cmm ====================
F.gg_entry()
        { [const 65541;, const 0;, const 15;]
        }
    cOC:
        if (Sp - 12 < I32[BaseReg + 84]) goto cOE;
        R1 = I32[Sp + 0];
        I32[Sp + 0] = sp9_info;
        if (R1 & 3 != 0) goto cOH;
        jump I32[R1] ();
    cOE:
        R1 = F.gg_closure;
        jump (I32[BaseReg - 4]) ();
    cOH: jump sp9_info ();
}



==================== Optimised Cmm ====================
section "data" {
    _module_registered:
        const 0;
}



==================== Optimised Cmm ====================
__stginit_main:F_()
        { []
        }
    cQ7:
        if (0 != I32[_module_registered]) goto cQ8;
        goto cQ9;
    cQ8:
        Sp = Sp + 4;
        jump (I32[Sp - 4]) ();
    cQ9:
        I32[_module_registered] = 1;
        Sp = Sp - 4;
        I32[Sp] = __stginit_base:Prelude_;
        goto cQ8;
}



==================== Optimised Cmm ====================
__stginit_main:F()
        { []
        }
    cR3: jump __stginit_main:F_ ();
}


