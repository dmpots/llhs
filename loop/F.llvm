
==================== LLVM Code ====================
%F_g1_closure_struct = type <{i32,i32}>
@ghczmprim_GHCziTypes_Izh_static_info = external global [0 x i32]
@F_g1_closure =  global %F_g1_closure_struct <{i32 ptrtoint ([0 x i32]* @ghczmprim_GHCziTypes_Izh_static_info to i32),i32 0}>
%F_zdwff_closure_struct = type <{i32}>
@F_zdwff_closure =  global %F_zdwff_closure_struct <{i32 ptrtoint (void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @F_zdwff_info to i32)}>
%F_ff_closure_struct = type <{i32}>
@F_ff_closure =  global %F_ff_closure_struct <{i32 ptrtoint (void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @F_ff_info to i32)}>
%F_gg_closure_struct = type <{i32}>
@F_gg_closure =  global %F_gg_closure_struct <{i32 ptrtoint (void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @F_gg_info to i32)}>
%F_zdwf_closure_struct = type <{i32}>
@F_zdwf_closure =  global %F_zdwf_closure_struct <{i32 ptrtoint (void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @F_zdwf_info to i32)}>
%F_f_closure_struct = type <{i32}>
@F_f_closure =  global %F_f_closure_struct <{i32 ptrtoint (void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @F_f_info to i32)}>
%F_g_closure_struct = type <{i32}>
@F_g_closure =  global %F_g_closure_struct <{i32 ptrtoint (void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @F_g_info to i32)}>
%_module_registered_struct = type <{i32}>
@_module_registered = internal global %_module_registered_struct <{i32 0}>



==================== LLVM Code ====================



==================== LLVM Code ====================



==================== LLVM Code ====================
%F_zdwff_entry_struct = type <{i32,i32,i32}>
@F_zdwff_info_itable =  constant %F_zdwff_entry_struct <{i32 196621,i32 0,i32 15}>, section "__STRIP,__me0", align 4
define  cc 10 void @F_zdwff_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
cqx:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lsn4 = alloca i32, i32 1
    %lcpM = alloca i32, i32 1
    %lsor = alloca i32, i32 1
    %lson = alloca i32, i32 1
    %lsoq = alloca i32, i32 1
    %lsop = alloca i32, i32 1
    %lsoo = alloca i32, i32 1
    %lnqy = load i32** %Sp_Var
    %lnqz = getelementptr inbounds i32* %lnqy, i32 0
    %lnqA = bitcast i32* %lnqz to i32*
    %lnqB = load i32* %lnqA
    store i32 %lnqB, i32* %lsn4
    %lnqC = load i32* %lsn4
    %lnqD = icmp ne i32 %lnqC, 0
    br i1 %lnqD, label %cqF, label %nqG
    nqG:
    %lnqH = load i32** %Sp_Var
    %lnqI = getelementptr inbounds i32* %lnqH, i32 1
    %lnqJ = bitcast i32* %lnqI to i32*
    %lnqK = load i32* %lnqJ
    %lnqL = load i32** %Sp_Var
    %lnqM = getelementptr inbounds i32* %lnqL, i32 2
    %lnqN = bitcast i32* %lnqM to i32*
    %lnqO = load i32* %lnqN
    %lnqP = add i32 %lnqK, %lnqO
    store i32 %lnqP, i32* %lcpM
    %lnqQ = load i32* %lcpM
    store i32 %lnqQ, i32* %R1_Var
    %lnqR = load i32** %Sp_Var
    %lnqS = getelementptr inbounds i32* %lnqR, i32 3
    %lnqT = ptrtoint i32* %lnqS to i32
    %lnqU = inttoptr i32 %lnqT to i32*
    store i32* %lnqU, i32** %Sp_Var
    %lnqV = load i32** %Sp_Var
    %lnqW = getelementptr inbounds i32* %lnqV, i32 0
    %lnqX = bitcast i32* %lnqW to i32*
    %lnqY = load i32* %lnqX
    %lnqZ = inttoptr i32 %lnqY to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnr0 = load i32** %Base_Var
    %lnr1 = load i32** %Sp_Var
    %lnr2 = load i32** %Hp_Var
    %lnr3 = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnqZ( i32* %lnr0,i32* %lnr1,i32* %lnr2,i32 %lnr3 ) nounwind
    ret void
cqF:
    %lnr4 = load i32* %lsn4
    %lnr5 = mul i32 %lnr4, 5
    store i32 %lnr5, i32* %lsor
    %lnr6 = load i32** %Sp_Var
    %lnr7 = getelementptr inbounds i32* %lnr6, i32 2
    %lnr8 = bitcast i32* %lnr7 to i32*
    %lnr9 = load i32* %lnr8
    %lnra = load i32* %lsor
    %lnrb = add i32 %lnr9, %lnra
    store i32 %lnrb, i32* %lson
    %lnrc = load i32** %Sp_Var
    %lnrd = getelementptr inbounds i32* %lnrc, i32 1
    %lnre = bitcast i32* %lnrd to i32*
    %lnrf = load i32* %lnre
    %lnrg = load i32* %lsn4
    %lnrh = add i32 %lnrf, %lnrg
    store i32 %lnrh, i32* %lsoq
    %lnri = load i32* %lsoq
    %lnrj = add i32 %lnri, 1
    store i32 %lnrj, i32* %lsop
    %lnrk = load i32* %lsn4
    %lnrl = sub i32 %lnrk, 1
    store i32 %lnrl, i32* %lsoo
    %lnrm = load i32* %lson
    %lnrn = load i32** %Sp_Var
    %lnro = getelementptr inbounds i32* %lnrn, i32 2
    store i32 %lnrm, i32* %lnro
    %lnrp = load i32* %lsop
    %lnrq = load i32** %Sp_Var
    %lnrr = getelementptr inbounds i32* %lnrq, i32 1
    store i32 %lnrp, i32* %lnrr
    %lnrs = load i32* %lsoo
    %lnrt = load i32** %Sp_Var
    %lnru = getelementptr inbounds i32* %lnrt, i32 0
    store i32 %lnrs, i32* %lnru
    %lnrv = load i32** %Base_Var
    %lnrw = load i32** %Sp_Var
    %lnrx = load i32** %Hp_Var
    %lnry = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @F_zdwff_info( i32* %lnrv,i32* %lnrw,i32* %lnrx,i32 %lnry ) nounwind
    ret void
}



==================== LLVM Code ====================



==================== LLVM Code ====================
@ghczmprim_GHCziTypes_Izh_con_info = external global [0 x i32]
declare  cc 10 void @stg_gc_unbx_r1(i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 ) align 4
%sns_ret_struct = type <{i32,i32}>
@sns_info_itable = internal constant %sns_ret_struct <{i32 0,i32 32}>, section "__STRIP,__me0", align 4
define internal cc 10 void @sns_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
csw:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lnsx = load i32** %Hp_Var
    %lnsy = getelementptr inbounds i32* %lnsx, i32 2
    %lnsz = ptrtoint i32* %lnsy to i32
    %lnsA = inttoptr i32 %lnsz to i32*
    store i32* %lnsA, i32** %Hp_Var
    %lnsB = load i32** %Hp_Var
    %lnsC = ptrtoint i32* %lnsB to i32
    %lnsD = load i32** %Base_Var
    %lnsE = getelementptr inbounds i32* %lnsD, i32 23
    %lnsF = bitcast i32* %lnsE to i32*
    %lnsG = load i32* %lnsF
    %lnsH = icmp ugt i32 %lnsC, %lnsG
    br i1 %lnsH, label %csN, label %nsO
    nsO:
    %lnsP = ptrtoint [0 x i32]* @ghczmprim_GHCziTypes_Izh_con_info to i32
    %lnsQ = load i32** %Hp_Var
    %lnsR = getelementptr inbounds i32* %lnsQ, i32 -1
    store i32 %lnsP, i32* %lnsR
    %lnsS = load i32* %R1_Var
    %lnsT = load i32** %Hp_Var
    %lnsU = getelementptr inbounds i32* %lnsT, i32 0
    store i32 %lnsS, i32* %lnsU
    %lnsV = load i32** %Hp_Var
    %lnsW = ptrtoint i32* %lnsV to i32
    %lnsX = add i32 %lnsW, -3
    store i32 %lnsX, i32* %R1_Var
    %lnsY = load i32** %Sp_Var
    %lnsZ = getelementptr inbounds i32* %lnsY, i32 1
    %lnt0 = ptrtoint i32* %lnsZ to i32
    %lnt1 = inttoptr i32 %lnt0 to i32*
    store i32* %lnt1, i32** %Sp_Var
    %lnt2 = load i32** %Sp_Var
    %lnt3 = getelementptr inbounds i32* %lnt2, i32 0
    %lnt4 = bitcast i32* %lnt3 to i32*
    %lnt5 = load i32* %lnt4
    %lnt6 = inttoptr i32 %lnt5 to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnt7 = load i32** %Base_Var
    %lnt8 = load i32** %Sp_Var
    %lnt9 = load i32** %Hp_Var
    %lnta = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnt6( i32* %lnt7,i32* %lnt8,i32* %lnt9,i32 %lnta ) nounwind
    ret void
ctb:
    %lntc = load i32** %Base_Var
    %lntd = load i32** %Sp_Var
    %lnte = load i32** %Hp_Var
    %lntf = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @stg_gc_unbx_r1( i32* %lntc,i32* %lntd,i32* %lnte,i32 %lntf ) nounwind
    ret void
csN:
    %lntg = load i32** %Base_Var
    %lnth = getelementptr inbounds i32* %lntg, i32 28
    store i32 8, i32* %lnth
    br label %ctb
}



==================== LLVM Code ====================
%sow_ret_struct = type <{i32,i32}>
@sow_info_itable = internal constant %sow_ret_struct <{i32 98,i32 32}>, section "__STRIP,__me0", align 4
define internal cc 10 void @sow_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
ctM:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lntN = load i32** %Sp_Var
    %lntO = getelementptr inbounds i32* %lntN, i32 2
    %lntP = bitcast i32* %lntO to i32*
    %lntQ = load i32* %lntP
    %lntR = load i32** %Sp_Var
    %lntS = getelementptr inbounds i32* %lntR, i32 0
    store i32 %lntQ, i32* %lntS
    %lntT = load i32** %Sp_Var
    %lntU = getelementptr inbounds i32* %lntT, i32 1
    %lntV = bitcast i32* %lntU to i32*
    %lntW = load i32* %lntV
    %lntX = load i32** %Sp_Var
    %lntY = getelementptr inbounds i32* %lntX, i32 -1
    store i32 %lntW, i32* %lntY
    %lntZ = load i32* %R1_Var
    %lnu0 = add i32 %lntZ, 3
    %lnu1 = inttoptr i32 %lnu0 to i32*
    %lnu2 = load i32* %lnu1
    %lnu3 = load i32** %Sp_Var
    %lnu4 = getelementptr inbounds i32* %lnu3, i32 1
    store i32 %lnu2, i32* %lnu4
    %lnu5 = ptrtoint void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @sns_info to i32
    %lnu6 = load i32** %Sp_Var
    %lnu7 = getelementptr inbounds i32* %lnu6, i32 2
    store i32 %lnu5, i32* %lnu7
    %lnu8 = load i32** %Sp_Var
    %lnu9 = getelementptr inbounds i32* %lnu8, i32 -1
    %lnua = ptrtoint i32* %lnu9 to i32
    %lnub = inttoptr i32 %lnua to i32*
    store i32* %lnub, i32** %Sp_Var
    %lnuc = load i32** %Base_Var
    %lnud = load i32** %Sp_Var
    %lnue = load i32** %Hp_Var
    %lnuf = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @F_zdwff_info( i32* %lnuc,i32* %lnud,i32* %lnue,i32 %lnuf ) nounwind
    ret void
}



==================== LLVM Code ====================
%sox_ret_struct = type <{i32,i32}>
@sox_info_itable = internal constant %sox_ret_struct <{i32 34,i32 32}>, section "__STRIP,__me0", align 4
define internal cc 10 void @sox_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
cuO:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lcum = alloca i32, i32 1
    %lnuP = load i32** %Sp_Var
    %lnuQ = getelementptr inbounds i32* %lnuP, i32 2
    %lnuR = bitcast i32* %lnuQ to i32*
    %lnuS = load i32* %lnuR
    store i32 %lnuS, i32* %lcum
    %lnuT = load i32* %R1_Var
    %lnuU = add i32 %lnuT, 3
    %lnuV = inttoptr i32 %lnuU to i32*
    %lnuW = load i32* %lnuV
    %lnuX = load i32** %Sp_Var
    %lnuY = getelementptr inbounds i32* %lnuX, i32 2
    store i32 %lnuW, i32* %lnuY
    %lnuZ = load i32* %lcum
    store i32 %lnuZ, i32* %R1_Var
    %lnv0 = ptrtoint void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @sow_info to i32
    %lnv1 = load i32** %Sp_Var
    %lnv2 = getelementptr inbounds i32* %lnv1, i32 0
    store i32 %lnv0, i32* %lnv2
    %lnv3 = load i32* %R1_Var
    %lnv4 = and i32 %lnv3, 3
    %lnv5 = icmp ne i32 %lnv4, 0
    br i1 %lnv5, label %cv7, label %nv8
    nv8:
    %lnv9 = load i32* %R1_Var
    %lnva = inttoptr i32 %lnv9 to i32*
    %lnvb = load i32* %lnva
    %lnvc = inttoptr i32 %lnvb to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnvd = load i32** %Base_Var
    %lnve = load i32** %Sp_Var
    %lnvf = load i32** %Hp_Var
    %lnvg = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnvc( i32* %lnvd,i32* %lnve,i32* %lnvf,i32 %lnvg ) nounwind
    ret void
cv7:
    %lnvh = load i32** %Base_Var
    %lnvi = load i32** %Sp_Var
    %lnvj = load i32** %Hp_Var
    %lnvk = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @sow_info( i32* %lnvh,i32* %lnvi,i32* %lnvj,i32 %lnvk ) nounwind
    ret void
}



==================== LLVM Code ====================
%soy_ret_struct = type <{i32,i32}>
@soy_info_itable = internal constant %soy_ret_struct <{i32 2,i32 32}>, section "__STRIP,__me0", align 4
define internal cc 10 void @soy_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
cvT:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lcvr = alloca i32, i32 1
    %lnvU = load i32** %Sp_Var
    %lnvV = getelementptr inbounds i32* %lnvU, i32 1
    %lnvW = bitcast i32* %lnvV to i32*
    %lnvX = load i32* %lnvW
    store i32 %lnvX, i32* %lcvr
    %lnvY = load i32* %R1_Var
    %lnvZ = add i32 %lnvY, 3
    %lnw0 = inttoptr i32 %lnvZ to i32*
    %lnw1 = load i32* %lnw0
    %lnw2 = load i32** %Sp_Var
    %lnw3 = getelementptr inbounds i32* %lnw2, i32 1
    store i32 %lnw1, i32* %lnw3
    %lnw4 = load i32* %lcvr
    store i32 %lnw4, i32* %R1_Var
    %lnw5 = ptrtoint void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @sox_info to i32
    %lnw6 = load i32** %Sp_Var
    %lnw7 = getelementptr inbounds i32* %lnw6, i32 0
    store i32 %lnw5, i32* %lnw7
    %lnw8 = load i32* %R1_Var
    %lnw9 = and i32 %lnw8, 3
    %lnwa = icmp ne i32 %lnw9, 0
    br i1 %lnwa, label %cwc, label %nwd
    nwd:
    %lnwe = load i32* %R1_Var
    %lnwf = inttoptr i32 %lnwe to i32*
    %lnwg = load i32* %lnwf
    %lnwh = inttoptr i32 %lnwg to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnwi = load i32** %Base_Var
    %lnwj = load i32** %Sp_Var
    %lnwk = load i32** %Hp_Var
    %lnwl = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnwh( i32* %lnwi,i32* %lnwj,i32* %lnwk,i32 %lnwl ) nounwind
    ret void
cwc:
    %lnwm = load i32** %Base_Var
    %lnwn = load i32** %Sp_Var
    %lnwo = load i32** %Hp_Var
    %lnwp = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @sox_info( i32* %lnwm,i32* %lnwn,i32* %lnwo,i32 %lnwp ) nounwind
    ret void
}



==================== LLVM Code ====================
%F_ff_entry_struct = type <{i32,i32,i32}>
@F_ff_info_itable =  constant %F_ff_entry_struct <{i32 196628,i32 0,i32 15}>, section "__STRIP,__me0", align 4
define  cc 10 void @F_ff_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
cx7:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lnx8 = load i32** %Sp_Var
    %lnx9 = getelementptr inbounds i32* %lnx8, i32 -1
    %lnxa = ptrtoint i32* %lnx9 to i32
    %lnxb = load i32** %Base_Var
    %lnxc = getelementptr inbounds i32* %lnxb, i32 21
    %lnxd = bitcast i32* %lnxc to i32*
    %lnxe = load i32* %lnxd
    %lnxf = icmp ult i32 %lnxa, %lnxe
    br i1 %lnxf, label %cxh, label %nxi
    nxi:
    %lnxj = load i32** %Sp_Var
    %lnxk = getelementptr inbounds i32* %lnxj, i32 0
    %lnxl = bitcast i32* %lnxk to i32*
    %lnxm = load i32* %lnxl
    store i32 %lnxm, i32* %R1_Var
    %lnxn = ptrtoint void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @soy_info to i32
    %lnxo = load i32** %Sp_Var
    %lnxp = getelementptr inbounds i32* %lnxo, i32 0
    store i32 %lnxn, i32* %lnxp
    %lnxq = load i32* %R1_Var
    %lnxr = and i32 %lnxq, 3
    %lnxs = icmp ne i32 %lnxr, 0
    br i1 %lnxs, label %cxv, label %nxw
    nxw:
    %lnxx = load i32* %R1_Var
    %lnxy = inttoptr i32 %lnxx to i32*
    %lnxz = load i32* %lnxy
    %lnxA = inttoptr i32 %lnxz to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnxB = load i32** %Base_Var
    %lnxC = load i32** %Sp_Var
    %lnxD = load i32** %Hp_Var
    %lnxE = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnxA( i32* %lnxB,i32* %lnxC,i32* %lnxD,i32 %lnxE ) nounwind
    ret void
cxh:
    %lnxF = ptrtoint %F_ff_closure_struct* @F_ff_closure to i32
    store i32 %lnxF, i32* %R1_Var
    %lnxG = load i32** %Base_Var
    %lnxH = getelementptr inbounds i32* %lnxG, i32 -1
    %lnxI = bitcast i32* %lnxH to i32*
    %lnxJ = load i32* %lnxI
    %lnxK = inttoptr i32 %lnxJ to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnxL = load i32** %Base_Var
    %lnxM = load i32** %Sp_Var
    %lnxN = load i32** %Hp_Var
    %lnxO = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnxK( i32* %lnxL,i32* %lnxM,i32* %lnxN,i32 %lnxO ) nounwind
    ret void
cxv:
    %lnxP = load i32** %Base_Var
    %lnxQ = load i32** %Sp_Var
    %lnxR = load i32** %Hp_Var
    %lnxS = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @soy_info( i32* %lnxP,i32* %lnxQ,i32* %lnxR,i32 %lnxS ) nounwind
    ret void
}



==================== LLVM Code ====================



==================== LLVM Code ====================
%snz_ret_struct = type <{i32,i32}>
@snz_info_itable = internal constant %snz_ret_struct <{i32 0,i32 32}>, section "__STRIP,__me0", align 4
define internal cc 10 void @snz_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
cyI:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lnyJ = load i32** %Hp_Var
    %lnyK = getelementptr inbounds i32* %lnyJ, i32 2
    %lnyL = ptrtoint i32* %lnyK to i32
    %lnyM = inttoptr i32 %lnyL to i32*
    store i32* %lnyM, i32** %Hp_Var
    %lnyN = load i32** %Hp_Var
    %lnyO = ptrtoint i32* %lnyN to i32
    %lnyP = load i32** %Base_Var
    %lnyQ = getelementptr inbounds i32* %lnyP, i32 23
    %lnyR = bitcast i32* %lnyQ to i32*
    %lnyS = load i32* %lnyR
    %lnyT = icmp ugt i32 %lnyO, %lnyS
    br i1 %lnyT, label %cyZ, label %nz0
    nz0:
    %lnz1 = ptrtoint [0 x i32]* @ghczmprim_GHCziTypes_Izh_con_info to i32
    %lnz2 = load i32** %Hp_Var
    %lnz3 = getelementptr inbounds i32* %lnz2, i32 -1
    store i32 %lnz1, i32* %lnz3
    %lnz4 = load i32* %R1_Var
    %lnz5 = load i32** %Hp_Var
    %lnz6 = getelementptr inbounds i32* %lnz5, i32 0
    store i32 %lnz4, i32* %lnz6
    %lnz7 = load i32** %Hp_Var
    %lnz8 = ptrtoint i32* %lnz7 to i32
    %lnz9 = add i32 %lnz8, -3
    store i32 %lnz9, i32* %R1_Var
    %lnza = load i32** %Sp_Var
    %lnzb = getelementptr inbounds i32* %lnza, i32 1
    %lnzc = ptrtoint i32* %lnzb to i32
    %lnzd = inttoptr i32 %lnzc to i32*
    store i32* %lnzd, i32** %Sp_Var
    %lnze = load i32** %Sp_Var
    %lnzf = getelementptr inbounds i32* %lnze, i32 0
    %lnzg = bitcast i32* %lnzf to i32*
    %lnzh = load i32* %lnzg
    %lnzi = inttoptr i32 %lnzh to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnzj = load i32** %Base_Var
    %lnzk = load i32** %Sp_Var
    %lnzl = load i32** %Hp_Var
    %lnzm = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnzi( i32* %lnzj,i32* %lnzk,i32* %lnzl,i32 %lnzm ) nounwind
    ret void
czn:
    %lnzo = load i32** %Base_Var
    %lnzp = load i32** %Sp_Var
    %lnzq = load i32** %Hp_Var
    %lnzr = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @stg_gc_unbx_r1( i32* %lnzo,i32* %lnzp,i32* %lnzq,i32 %lnzr ) nounwind
    ret void
cyZ:
    %lnzs = load i32** %Base_Var
    %lnzt = getelementptr inbounds i32* %lnzs, i32 28
    store i32 8, i32* %lnzt
    br label %czn
}



==================== LLVM Code ====================
%soH_ret_struct = type <{i32,i32}>
@soH_info_itable = internal constant %soH_ret_struct <{i32 0,i32 32}>, section "__STRIP,__me0", align 4
define internal cc 10 void @soH_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
czQ:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lnzR = load i32** %Sp_Var
    %lnzS = getelementptr inbounds i32* %lnzR, i32 -1
    store i32 0, i32* %lnzS
    %lnzT = load i32** %Sp_Var
    %lnzU = getelementptr inbounds i32* %lnzT, i32 -2
    store i32 0, i32* %lnzU
    %lnzV = load i32* %R1_Var
    %lnzW = add i32 %lnzV, 3
    %lnzX = inttoptr i32 %lnzW to i32*
    %lnzY = load i32* %lnzX
    %lnzZ = load i32** %Sp_Var
    %lnA0 = getelementptr inbounds i32* %lnzZ, i32 -3
    store i32 %lnzY, i32* %lnA0
    %lnA1 = ptrtoint void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @snz_info to i32
    %lnA2 = load i32** %Sp_Var
    %lnA3 = getelementptr inbounds i32* %lnA2, i32 0
    store i32 %lnA1, i32* %lnA3
    %lnA4 = load i32** %Sp_Var
    %lnA5 = getelementptr inbounds i32* %lnA4, i32 -3
    %lnA6 = ptrtoint i32* %lnA5 to i32
    %lnA7 = inttoptr i32 %lnA6 to i32*
    store i32* %lnA7, i32** %Sp_Var
    %lnA8 = load i32** %Base_Var
    %lnA9 = load i32** %Sp_Var
    %lnAa = load i32** %Hp_Var
    %lnAb = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @F_zdwff_info( i32* %lnA8,i32* %lnA9,i32* %lnAa,i32 %lnAb ) nounwind
    ret void
}



==================== LLVM Code ====================
%F_gg_entry_struct = type <{i32,i32,i32}>
@F_gg_info_itable =  constant %F_gg_entry_struct <{i32 65541,i32 0,i32 15}>, section "__STRIP,__me0", align 4
define  cc 10 void @F_gg_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
cAT:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lnAU = load i32** %Sp_Var
    %lnAV = getelementptr inbounds i32* %lnAU, i32 -3
    %lnAW = ptrtoint i32* %lnAV to i32
    %lnAX = load i32** %Base_Var
    %lnAY = getelementptr inbounds i32* %lnAX, i32 21
    %lnAZ = bitcast i32* %lnAY to i32*
    %lnB0 = load i32* %lnAZ
    %lnB1 = icmp ult i32 %lnAW, %lnB0
    br i1 %lnB1, label %cB3, label %nB4
    nB4:
    %lnB5 = load i32** %Sp_Var
    %lnB6 = getelementptr inbounds i32* %lnB5, i32 0
    %lnB7 = bitcast i32* %lnB6 to i32*
    %lnB8 = load i32* %lnB7
    store i32 %lnB8, i32* %R1_Var
    %lnB9 = ptrtoint void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @soH_info to i32
    %lnBa = load i32** %Sp_Var
    %lnBb = getelementptr inbounds i32* %lnBa, i32 0
    store i32 %lnB9, i32* %lnBb
    %lnBc = load i32* %R1_Var
    %lnBd = and i32 %lnBc, 3
    %lnBe = icmp ne i32 %lnBd, 0
    br i1 %lnBe, label %cBh, label %nBi
    nBi:
    %lnBj = load i32* %R1_Var
    %lnBk = inttoptr i32 %lnBj to i32*
    %lnBl = load i32* %lnBk
    %lnBm = inttoptr i32 %lnBl to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnBn = load i32** %Base_Var
    %lnBo = load i32** %Sp_Var
    %lnBp = load i32** %Hp_Var
    %lnBq = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnBm( i32* %lnBn,i32* %lnBo,i32* %lnBp,i32 %lnBq ) nounwind
    ret void
cB3:
    %lnBr = ptrtoint %F_gg_closure_struct* @F_gg_closure to i32
    store i32 %lnBr, i32* %R1_Var
    %lnBs = load i32** %Base_Var
    %lnBt = getelementptr inbounds i32* %lnBs, i32 -1
    %lnBu = bitcast i32* %lnBt to i32*
    %lnBv = load i32* %lnBu
    %lnBw = inttoptr i32 %lnBv to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnBx = load i32** %Base_Var
    %lnBy = load i32** %Sp_Var
    %lnBz = load i32** %Hp_Var
    %lnBA = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnBw( i32* %lnBx,i32* %lnBy,i32* %lnBz,i32 %lnBA ) nounwind
    ret void
cBh:
    %lnBB = load i32** %Base_Var
    %lnBC = load i32** %Sp_Var
    %lnBD = load i32** %Hp_Var
    %lnBE = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @soH_info( i32* %lnBB,i32* %lnBC,i32* %lnBD,i32 %lnBE ) nounwind
    ret void
}



==================== LLVM Code ====================



==================== LLVM Code ====================
define  cc 10 void @F_zdwf_slow(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind
{
cBQ:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lnBR = load i32** %Sp_Var
    %lnBS = getelementptr inbounds i32* %lnBR, i32 0
    %lnBT = ptrtoint i32* %lnBS to i32
    %lnBU = inttoptr i32 %lnBT to i32*
    store i32* %lnBU, i32** %Sp_Var
    %lnBV = load i32** %Base_Var
    %lnBW = load i32** %Sp_Var
    %lnBX = load i32** %Hp_Var
    %lnBY = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @F_zdwf_info( i32* %lnBV,i32* %lnBW,i32* %lnBX,i32 %lnBY ) nounwind
    ret void
}



==================== LLVM Code ====================
%F_zdwf_entry_struct = type <{i32,i32,i32,i32,i32,i32}>
@F_zdwf_info_itable =  constant %F_zdwf_entry_struct <{i32 add (i32 sub (i32 ptrtoint (void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @F_zdwf_slow to i32),i32 ptrtoint (void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @F_zdwf_info to i32)),i32 0),i32 484,i32 0,i32 262144,i32 0,i32 15}>, section "__STRIP,__me0", align 4
define  cc 10 void @F_zdwf_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
cDh:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lsnG = alloca i32, i32 1
    %lcCl = alloca i32, i32 1
    %lsoT = alloca i32, i32 1
    %lsoO = alloca i32, i32 1
    %lsoS = alloca i32, i32 1
    %lsoR = alloca i32, i32 1
    %lsoQ = alloca i32, i32 1
    %lsoP = alloca i32, i32 1
    %lnDi = load i32** %Sp_Var
    %lnDj = getelementptr inbounds i32* %lnDi, i32 0
    %lnDk = bitcast i32* %lnDj to i32*
    %lnDl = load i32* %lnDk
    store i32 %lnDl, i32* %lsnG
    %lnDm = load i32* %lsnG
    %lnDn = icmp ne i32 %lnDm, 0
    br i1 %lnDn, label %cDp, label %nDq
    nDq:
    %lnDr = load i32** %Sp_Var
    %lnDs = getelementptr inbounds i32* %lnDr, i32 2
    %lnDt = bitcast i32* %lnDs to i32*
    %lnDu = load i32* %lnDt
    %lnDv = load i32** %Sp_Var
    %lnDw = getelementptr inbounds i32* %lnDv, i32 3
    %lnDx = bitcast i32* %lnDw to i32*
    %lnDy = load i32* %lnDx
    %lnDz = add i32 %lnDu, %lnDy
    store i32 %lnDz, i32* %lcCl
    %lnDA = load i32* %lcCl
    store i32 %lnDA, i32* %R1_Var
    %lnDB = load i32** %Sp_Var
    %lnDC = getelementptr inbounds i32* %lnDB, i32 4
    %lnDD = ptrtoint i32* %lnDC to i32
    %lnDE = inttoptr i32 %lnDD to i32*
    store i32* %lnDE, i32** %Sp_Var
    %lnDF = load i32** %Sp_Var
    %lnDG = getelementptr inbounds i32* %lnDF, i32 0
    %lnDH = bitcast i32* %lnDG to i32*
    %lnDI = load i32* %lnDH
    %lnDJ = inttoptr i32 %lnDI to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnDK = load i32** %Base_Var
    %lnDL = load i32** %Sp_Var
    %lnDM = load i32** %Hp_Var
    %lnDN = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnDJ( i32* %lnDK,i32* %lnDL,i32* %lnDM,i32 %lnDN ) nounwind
    ret void
cDp:
    %lnDO = load i32** %Sp_Var
    %lnDP = getelementptr inbounds i32* %lnDO, i32 1
    %lnDQ = bitcast i32* %lnDP to i32*
    %lnDR = load i32* %lnDQ
    %lnDS = mul i32 %lnDR, 5
    store i32 %lnDS, i32* %lsoT
    %lnDT = load i32** %Sp_Var
    %lnDU = getelementptr inbounds i32* %lnDT, i32 3
    %lnDV = bitcast i32* %lnDU to i32*
    %lnDW = load i32* %lnDV
    %lnDX = load i32* %lsoT
    %lnDY = add i32 %lnDW, %lnDX
    store i32 %lnDY, i32* %lsoO
    %lnDZ = load i32** %Sp_Var
    %lnE0 = getelementptr inbounds i32* %lnDZ, i32 2
    %lnE1 = bitcast i32* %lnE0 to i32*
    %lnE2 = load i32* %lnE1
    %lnE3 = load i32* %lsnG
    %lnE4 = add i32 %lnE2, %lnE3
    store i32 %lnE4, i32* %lsoS
    %lnE5 = load i32* %lsoS
    %lnE6 = add i32 %lnE5, 1
    store i32 %lnE6, i32* %lsoR
    %lnE7 = load i32** %Sp_Var
    %lnE8 = getelementptr inbounds i32* %lnE7, i32 1
    %lnE9 = bitcast i32* %lnE8 to i32*
    %lnEa = load i32* %lnE9
    %lnEb = sub i32 %lnEa, 1
    store i32 %lnEb, i32* %lsoQ
    %lnEc = load i32* %lsnG
    %lnEd = sub i32 %lnEc, 1
    store i32 %lnEd, i32* %lsoP
    %lnEe = load i32* %lsoO
    %lnEf = load i32** %Sp_Var
    %lnEg = getelementptr inbounds i32* %lnEf, i32 3
    store i32 %lnEe, i32* %lnEg
    %lnEh = load i32* %lsoR
    %lnEi = load i32** %Sp_Var
    %lnEj = getelementptr inbounds i32* %lnEi, i32 2
    store i32 %lnEh, i32* %lnEj
    %lnEk = load i32* %lsoQ
    %lnEl = load i32** %Sp_Var
    %lnEm = getelementptr inbounds i32* %lnEl, i32 1
    store i32 %lnEk, i32* %lnEm
    %lnEn = load i32* %lsoP
    %lnEo = load i32** %Sp_Var
    %lnEp = getelementptr inbounds i32* %lnEo, i32 0
    store i32 %lnEn, i32* %lnEp
    %lnEq = load i32** %Base_Var
    %lnEr = load i32** %Sp_Var
    %lnEs = load i32** %Hp_Var
    %lnEt = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @F_zdwf_info( i32* %lnEq,i32* %lnEr,i32* %lnEs,i32 %lnEt ) nounwind
    ret void
}



==================== LLVM Code ====================



==================== LLVM Code ====================
%sob_ret_struct = type <{i32,i32}>
@sob_info_itable = internal constant %sob_ret_struct <{i32 0,i32 32}>, section "__STRIP,__me0", align 4
define internal cc 10 void @sob_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
cFv:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lnFw = load i32** %Hp_Var
    %lnFx = getelementptr inbounds i32* %lnFw, i32 2
    %lnFy = ptrtoint i32* %lnFx to i32
    %lnFz = inttoptr i32 %lnFy to i32*
    store i32* %lnFz, i32** %Hp_Var
    %lnFA = load i32** %Hp_Var
    %lnFB = ptrtoint i32* %lnFA to i32
    %lnFC = load i32** %Base_Var
    %lnFD = getelementptr inbounds i32* %lnFC, i32 23
    %lnFE = bitcast i32* %lnFD to i32*
    %lnFF = load i32* %lnFE
    %lnFG = icmp ugt i32 %lnFB, %lnFF
    br i1 %lnFG, label %cFM, label %nFN
    nFN:
    %lnFO = ptrtoint [0 x i32]* @ghczmprim_GHCziTypes_Izh_con_info to i32
    %lnFP = load i32** %Hp_Var
    %lnFQ = getelementptr inbounds i32* %lnFP, i32 -1
    store i32 %lnFO, i32* %lnFQ
    %lnFR = load i32* %R1_Var
    %lnFS = load i32** %Hp_Var
    %lnFT = getelementptr inbounds i32* %lnFS, i32 0
    store i32 %lnFR, i32* %lnFT
    %lnFU = load i32** %Hp_Var
    %lnFV = ptrtoint i32* %lnFU to i32
    %lnFW = add i32 %lnFV, -3
    store i32 %lnFW, i32* %R1_Var
    %lnFX = load i32** %Sp_Var
    %lnFY = getelementptr inbounds i32* %lnFX, i32 1
    %lnFZ = ptrtoint i32* %lnFY to i32
    %lnG0 = inttoptr i32 %lnFZ to i32*
    store i32* %lnG0, i32** %Sp_Var
    %lnG1 = load i32** %Sp_Var
    %lnG2 = getelementptr inbounds i32* %lnG1, i32 0
    %lnG3 = bitcast i32* %lnG2 to i32*
    %lnG4 = load i32* %lnG3
    %lnG5 = inttoptr i32 %lnG4 to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnG6 = load i32** %Base_Var
    %lnG7 = load i32** %Sp_Var
    %lnG8 = load i32** %Hp_Var
    %lnG9 = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnG5( i32* %lnG6,i32* %lnG7,i32* %lnG8,i32 %lnG9 ) nounwind
    ret void
cGa:
    %lnGb = load i32** %Base_Var
    %lnGc = load i32** %Sp_Var
    %lnGd = load i32** %Hp_Var
    %lnGe = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @stg_gc_unbx_r1( i32* %lnGb,i32* %lnGc,i32* %lnGd,i32 %lnGe ) nounwind
    ret void
cFM:
    %lnGf = load i32** %Base_Var
    %lnGg = getelementptr inbounds i32* %lnGf, i32 28
    store i32 8, i32* %lnGg
    br label %cGa
}



==================== LLVM Code ====================
%soZ_ret_struct = type <{i32,i32}>
@soZ_info_itable = internal constant %soZ_ret_struct <{i32 227,i32 32}>, section "__STRIP,__me0", align 4
define internal cc 10 void @soZ_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
cGR:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lnGS = load i32** %Sp_Var
    %lnGT = getelementptr inbounds i32* %lnGS, i32 2
    %lnGU = bitcast i32* %lnGT to i32*
    %lnGV = load i32* %lnGU
    %lnGW = load i32** %Sp_Var
    %lnGX = getelementptr inbounds i32* %lnGW, i32 0
    store i32 %lnGV, i32* %lnGX
    %lnGY = load i32* %R1_Var
    %lnGZ = add i32 %lnGY, 3
    %lnH0 = inttoptr i32 %lnGZ to i32*
    %lnH1 = load i32* %lnH0
    %lnH2 = load i32** %Sp_Var
    %lnH3 = getelementptr inbounds i32* %lnH2, i32 2
    store i32 %lnH1, i32* %lnH3
    %lnH4 = load i32** %Sp_Var
    %lnH5 = getelementptr inbounds i32* %lnH4, i32 1
    %lnH6 = bitcast i32* %lnH5 to i32*
    %lnH7 = load i32* %lnH6
    %lnH8 = load i32** %Sp_Var
    %lnH9 = getelementptr inbounds i32* %lnH8, i32 -1
    store i32 %lnH7, i32* %lnH9
    %lnHa = load i32** %Sp_Var
    %lnHb = getelementptr inbounds i32* %lnHa, i32 3
    %lnHc = bitcast i32* %lnHb to i32*
    %lnHd = load i32* %lnHc
    %lnHe = load i32** %Sp_Var
    %lnHf = getelementptr inbounds i32* %lnHe, i32 1
    store i32 %lnHd, i32* %lnHf
    %lnHg = ptrtoint void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @sob_info to i32
    %lnHh = load i32** %Sp_Var
    %lnHi = getelementptr inbounds i32* %lnHh, i32 3
    store i32 %lnHg, i32* %lnHi
    %lnHj = load i32** %Sp_Var
    %lnHk = getelementptr inbounds i32* %lnHj, i32 -1
    %lnHl = ptrtoint i32* %lnHk to i32
    %lnHm = inttoptr i32 %lnHl to i32*
    store i32* %lnHm, i32** %Sp_Var
    %lnHn = load i32** %Base_Var
    %lnHo = load i32** %Sp_Var
    %lnHp = load i32** %Hp_Var
    %lnHq = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @F_zdwf_info( i32* %lnHn,i32* %lnHo,i32* %lnHp,i32 %lnHq ) nounwind
    ret void
}



==================== LLVM Code ====================
%sp0_ret_struct = type <{i32,i32}>
@sp0_info_itable = internal constant %sp0_ret_struct <{i32 99,i32 32}>, section "__STRIP,__me0", align 4
define internal cc 10 void @sp0_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
cHZ:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lcHx = alloca i32, i32 1
    %lnI0 = load i32** %Sp_Var
    %lnI1 = getelementptr inbounds i32* %lnI0, i32 3
    %lnI2 = bitcast i32* %lnI1 to i32*
    %lnI3 = load i32* %lnI2
    store i32 %lnI3, i32* %lcHx
    %lnI4 = load i32* %R1_Var
    %lnI5 = add i32 %lnI4, 3
    %lnI6 = inttoptr i32 %lnI5 to i32*
    %lnI7 = load i32* %lnI6
    %lnI8 = load i32** %Sp_Var
    %lnI9 = getelementptr inbounds i32* %lnI8, i32 3
    store i32 %lnI7, i32* %lnI9
    %lnIa = load i32* %lcHx
    store i32 %lnIa, i32* %R1_Var
    %lnIb = ptrtoint void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @soZ_info to i32
    %lnIc = load i32** %Sp_Var
    %lnId = getelementptr inbounds i32* %lnIc, i32 0
    store i32 %lnIb, i32* %lnId
    %lnIe = load i32* %R1_Var
    %lnIf = and i32 %lnIe, 3
    %lnIg = icmp ne i32 %lnIf, 0
    br i1 %lnIg, label %cIi, label %nIj
    nIj:
    %lnIk = load i32* %R1_Var
    %lnIl = inttoptr i32 %lnIk to i32*
    %lnIm = load i32* %lnIl
    %lnIn = inttoptr i32 %lnIm to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnIo = load i32** %Base_Var
    %lnIp = load i32** %Sp_Var
    %lnIq = load i32** %Hp_Var
    %lnIr = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnIn( i32* %lnIo,i32* %lnIp,i32* %lnIq,i32 %lnIr ) nounwind
    ret void
cIi:
    %lnIs = load i32** %Base_Var
    %lnIt = load i32** %Sp_Var
    %lnIu = load i32** %Hp_Var
    %lnIv = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @soZ_info( i32* %lnIs,i32* %lnIt,i32* %lnIu,i32 %lnIv ) nounwind
    ret void
}



==================== LLVM Code ====================
%sp1_ret_struct = type <{i32,i32}>
@sp1_info_itable = internal constant %sp1_ret_struct <{i32 35,i32 32}>, section "__STRIP,__me0", align 4
define internal cc 10 void @sp1_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
cJ4:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lcIC = alloca i32, i32 1
    %lnJ5 = load i32** %Sp_Var
    %lnJ6 = getelementptr inbounds i32* %lnJ5, i32 2
    %lnJ7 = bitcast i32* %lnJ6 to i32*
    %lnJ8 = load i32* %lnJ7
    store i32 %lnJ8, i32* %lcIC
    %lnJ9 = load i32* %R1_Var
    %lnJa = add i32 %lnJ9, 3
    %lnJb = inttoptr i32 %lnJa to i32*
    %lnJc = load i32* %lnJb
    %lnJd = load i32** %Sp_Var
    %lnJe = getelementptr inbounds i32* %lnJd, i32 2
    store i32 %lnJc, i32* %lnJe
    %lnJf = load i32* %lcIC
    store i32 %lnJf, i32* %R1_Var
    %lnJg = ptrtoint void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @sp0_info to i32
    %lnJh = load i32** %Sp_Var
    %lnJi = getelementptr inbounds i32* %lnJh, i32 0
    store i32 %lnJg, i32* %lnJi
    %lnJj = load i32* %R1_Var
    %lnJk = and i32 %lnJj, 3
    %lnJl = icmp ne i32 %lnJk, 0
    br i1 %lnJl, label %cJn, label %nJo
    nJo:
    %lnJp = load i32* %R1_Var
    %lnJq = inttoptr i32 %lnJp to i32*
    %lnJr = load i32* %lnJq
    %lnJs = inttoptr i32 %lnJr to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnJt = load i32** %Base_Var
    %lnJu = load i32** %Sp_Var
    %lnJv = load i32** %Hp_Var
    %lnJw = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnJs( i32* %lnJt,i32* %lnJu,i32* %lnJv,i32 %lnJw ) nounwind
    ret void
cJn:
    %lnJx = load i32** %Base_Var
    %lnJy = load i32** %Sp_Var
    %lnJz = load i32** %Hp_Var
    %lnJA = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @sp0_info( i32* %lnJx,i32* %lnJy,i32* %lnJz,i32 %lnJA ) nounwind
    ret void
}



==================== LLVM Code ====================
%sp2_ret_struct = type <{i32,i32}>
@sp2_info_itable = internal constant %sp2_ret_struct <{i32 3,i32 32}>, section "__STRIP,__me0", align 4
define internal cc 10 void @sp2_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
cK9:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lcJH = alloca i32, i32 1
    %lnKa = load i32** %Sp_Var
    %lnKb = getelementptr inbounds i32* %lnKa, i32 1
    %lnKc = bitcast i32* %lnKb to i32*
    %lnKd = load i32* %lnKc
    store i32 %lnKd, i32* %lcJH
    %lnKe = load i32* %R1_Var
    %lnKf = add i32 %lnKe, 3
    %lnKg = inttoptr i32 %lnKf to i32*
    %lnKh = load i32* %lnKg
    %lnKi = load i32** %Sp_Var
    %lnKj = getelementptr inbounds i32* %lnKi, i32 1
    store i32 %lnKh, i32* %lnKj
    %lnKk = load i32* %lcJH
    store i32 %lnKk, i32* %R1_Var
    %lnKl = ptrtoint void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @sp1_info to i32
    %lnKm = load i32** %Sp_Var
    %lnKn = getelementptr inbounds i32* %lnKm, i32 0
    store i32 %lnKl, i32* %lnKn
    %lnKo = load i32* %R1_Var
    %lnKp = and i32 %lnKo, 3
    %lnKq = icmp ne i32 %lnKp, 0
    br i1 %lnKq, label %cKs, label %nKt
    nKt:
    %lnKu = load i32* %R1_Var
    %lnKv = inttoptr i32 %lnKu to i32*
    %lnKw = load i32* %lnKv
    %lnKx = inttoptr i32 %lnKw to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnKy = load i32** %Base_Var
    %lnKz = load i32** %Sp_Var
    %lnKA = load i32** %Hp_Var
    %lnKB = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnKx( i32* %lnKy,i32* %lnKz,i32* %lnKA,i32 %lnKB ) nounwind
    ret void
cKs:
    %lnKC = load i32** %Base_Var
    %lnKD = load i32** %Sp_Var
    %lnKE = load i32** %Hp_Var
    %lnKF = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @sp1_info( i32* %lnKC,i32* %lnKD,i32* %lnKE,i32 %lnKF ) nounwind
    ret void
}



==================== LLVM Code ====================
%F_f_entry_struct = type <{i32,i32,i32}>
@F_f_info_itable =  constant %F_f_entry_struct <{i32 262165,i32 0,i32 15}>, section "__STRIP,__me0", align 4
define  cc 10 void @F_f_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
cLn:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lnLo = load i32** %Sp_Var
    %lnLp = getelementptr inbounds i32* %lnLo, i32 -1
    %lnLq = ptrtoint i32* %lnLp to i32
    %lnLr = load i32** %Base_Var
    %lnLs = getelementptr inbounds i32* %lnLr, i32 21
    %lnLt = bitcast i32* %lnLs to i32*
    %lnLu = load i32* %lnLt
    %lnLv = icmp ult i32 %lnLq, %lnLu
    br i1 %lnLv, label %cLx, label %nLy
    nLy:
    %lnLz = load i32** %Sp_Var
    %lnLA = getelementptr inbounds i32* %lnLz, i32 0
    %lnLB = bitcast i32* %lnLA to i32*
    %lnLC = load i32* %lnLB
    store i32 %lnLC, i32* %R1_Var
    %lnLD = ptrtoint void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @sp2_info to i32
    %lnLE = load i32** %Sp_Var
    %lnLF = getelementptr inbounds i32* %lnLE, i32 0
    store i32 %lnLD, i32* %lnLF
    %lnLG = load i32* %R1_Var
    %lnLH = and i32 %lnLG, 3
    %lnLI = icmp ne i32 %lnLH, 0
    br i1 %lnLI, label %cLL, label %nLM
    nLM:
    %lnLN = load i32* %R1_Var
    %lnLO = inttoptr i32 %lnLN to i32*
    %lnLP = load i32* %lnLO
    %lnLQ = inttoptr i32 %lnLP to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnLR = load i32** %Base_Var
    %lnLS = load i32** %Sp_Var
    %lnLT = load i32** %Hp_Var
    %lnLU = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnLQ( i32* %lnLR,i32* %lnLS,i32* %lnLT,i32 %lnLU ) nounwind
    ret void
cLx:
    %lnLV = ptrtoint %F_f_closure_struct* @F_f_closure to i32
    store i32 %lnLV, i32* %R1_Var
    %lnLW = load i32** %Base_Var
    %lnLX = getelementptr inbounds i32* %lnLW, i32 -1
    %lnLY = bitcast i32* %lnLX to i32*
    %lnLZ = load i32* %lnLY
    %lnM0 = inttoptr i32 %lnLZ to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnM1 = load i32** %Base_Var
    %lnM2 = load i32** %Sp_Var
    %lnM3 = load i32** %Hp_Var
    %lnM4 = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnM0( i32* %lnM1,i32* %lnM2,i32* %lnM3,i32 %lnM4 ) nounwind
    ret void
cLL:
    %lnM5 = load i32** %Base_Var
    %lnM6 = load i32** %Sp_Var
    %lnM7 = load i32** %Hp_Var
    %lnM8 = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @sp2_info( i32* %lnM5,i32* %lnM6,i32* %lnM7,i32 %lnM8 ) nounwind
    ret void
}



==================== LLVM Code ====================



==================== LLVM Code ====================
%soi_ret_struct = type <{i32,i32}>
@soi_info_itable = internal constant %soi_ret_struct <{i32 0,i32 32}>, section "__STRIP,__me0", align 4
define internal cc 10 void @soi_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
cMY:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lnMZ = load i32** %Hp_Var
    %lnN0 = getelementptr inbounds i32* %lnMZ, i32 2
    %lnN1 = ptrtoint i32* %lnN0 to i32
    %lnN2 = inttoptr i32 %lnN1 to i32*
    store i32* %lnN2, i32** %Hp_Var
    %lnN3 = load i32** %Hp_Var
    %lnN4 = ptrtoint i32* %lnN3 to i32
    %lnN5 = load i32** %Base_Var
    %lnN6 = getelementptr inbounds i32* %lnN5, i32 23
    %lnN7 = bitcast i32* %lnN6 to i32*
    %lnN8 = load i32* %lnN7
    %lnN9 = icmp ugt i32 %lnN4, %lnN8
    br i1 %lnN9, label %cNf, label %nNg
    nNg:
    %lnNh = ptrtoint [0 x i32]* @ghczmprim_GHCziTypes_Izh_con_info to i32
    %lnNi = load i32** %Hp_Var
    %lnNj = getelementptr inbounds i32* %lnNi, i32 -1
    store i32 %lnNh, i32* %lnNj
    %lnNk = load i32* %R1_Var
    %lnNl = load i32** %Hp_Var
    %lnNm = getelementptr inbounds i32* %lnNl, i32 0
    store i32 %lnNk, i32* %lnNm
    %lnNn = load i32** %Hp_Var
    %lnNo = ptrtoint i32* %lnNn to i32
    %lnNp = add i32 %lnNo, -3
    store i32 %lnNp, i32* %R1_Var
    %lnNq = load i32** %Sp_Var
    %lnNr = getelementptr inbounds i32* %lnNq, i32 1
    %lnNs = ptrtoint i32* %lnNr to i32
    %lnNt = inttoptr i32 %lnNs to i32*
    store i32* %lnNt, i32** %Sp_Var
    %lnNu = load i32** %Sp_Var
    %lnNv = getelementptr inbounds i32* %lnNu, i32 0
    %lnNw = bitcast i32* %lnNv to i32*
    %lnNx = load i32* %lnNw
    %lnNy = inttoptr i32 %lnNx to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnNz = load i32** %Base_Var
    %lnNA = load i32** %Sp_Var
    %lnNB = load i32** %Hp_Var
    %lnNC = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnNy( i32* %lnNz,i32* %lnNA,i32* %lnNB,i32 %lnNC ) nounwind
    ret void
cND:
    %lnNE = load i32** %Base_Var
    %lnNF = load i32** %Sp_Var
    %lnNG = load i32** %Hp_Var
    %lnNH = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @stg_gc_unbx_r1( i32* %lnNE,i32* %lnNF,i32* %lnNG,i32 %lnNH ) nounwind
    ret void
cNf:
    %lnNI = load i32** %Base_Var
    %lnNJ = getelementptr inbounds i32* %lnNI, i32 28
    store i32 8, i32* %lnNJ
    br label %cND
}



==================== LLVM Code ====================
%spc_ret_struct = type <{i32,i32}>
@spc_info_itable = internal constant %spc_ret_struct <{i32 0,i32 32}>, section "__STRIP,__me0", align 4
define internal cc 10 void @spc_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
cOc:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lnOd = load i32** %Sp_Var
    %lnOe = getelementptr inbounds i32* %lnOd, i32 -1
    store i32 0, i32* %lnOe
    %lnOf = load i32** %Sp_Var
    %lnOg = getelementptr inbounds i32* %lnOf, i32 -2
    store i32 0, i32* %lnOg
    %lnOh = load i32* %R1_Var
    %lnOi = add i32 %lnOh, 3
    %lnOj = inttoptr i32 %lnOi to i32*
    %lnOk = load i32* %lnOj
    %lnOl = load i32** %Sp_Var
    %lnOm = getelementptr inbounds i32* %lnOl, i32 -3
    store i32 %lnOk, i32* %lnOm
    %lnOn = load i32* %R1_Var
    %lnOo = add i32 %lnOn, 3
    %lnOp = inttoptr i32 %lnOo to i32*
    %lnOq = load i32* %lnOp
    %lnOr = load i32** %Sp_Var
    %lnOs = getelementptr inbounds i32* %lnOr, i32 -4
    store i32 %lnOq, i32* %lnOs
    %lnOt = ptrtoint void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @soi_info to i32
    %lnOu = load i32** %Sp_Var
    %lnOv = getelementptr inbounds i32* %lnOu, i32 0
    store i32 %lnOt, i32* %lnOv
    %lnOw = load i32** %Sp_Var
    %lnOx = getelementptr inbounds i32* %lnOw, i32 -4
    %lnOy = ptrtoint i32* %lnOx to i32
    %lnOz = inttoptr i32 %lnOy to i32*
    store i32* %lnOz, i32** %Sp_Var
    %lnOA = load i32** %Base_Var
    %lnOB = load i32** %Sp_Var
    %lnOC = load i32** %Hp_Var
    %lnOD = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @F_zdwf_info( i32* %lnOA,i32* %lnOB,i32* %lnOC,i32 %lnOD ) nounwind
    ret void
}



==================== LLVM Code ====================
%F_g_entry_struct = type <{i32,i32,i32}>
@F_g_info_itable =  constant %F_g_entry_struct <{i32 65541,i32 0,i32 15}>, section "__STRIP,__me0", align 4
define  cc 10 void @F_g_info(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind section "__STRIP,__me1"
{
cPl:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lnPm = load i32** %Sp_Var
    %lnPn = getelementptr inbounds i32* %lnPm, i32 -4
    %lnPo = ptrtoint i32* %lnPn to i32
    %lnPp = load i32** %Base_Var
    %lnPq = getelementptr inbounds i32* %lnPp, i32 21
    %lnPr = bitcast i32* %lnPq to i32*
    %lnPs = load i32* %lnPr
    %lnPt = icmp ult i32 %lnPo, %lnPs
    br i1 %lnPt, label %cPv, label %nPw
    nPw:
    %lnPx = load i32** %Sp_Var
    %lnPy = getelementptr inbounds i32* %lnPx, i32 0
    %lnPz = bitcast i32* %lnPy to i32*
    %lnPA = load i32* %lnPz
    store i32 %lnPA, i32* %R1_Var
    %lnPB = ptrtoint void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )* @spc_info to i32
    %lnPC = load i32** %Sp_Var
    %lnPD = getelementptr inbounds i32* %lnPC, i32 0
    store i32 %lnPB, i32* %lnPD
    %lnPE = load i32* %R1_Var
    %lnPF = and i32 %lnPE, 3
    %lnPG = icmp ne i32 %lnPF, 0
    br i1 %lnPG, label %cPJ, label %nPK
    nPK:
    %lnPL = load i32* %R1_Var
    %lnPM = inttoptr i32 %lnPL to i32*
    %lnPN = load i32* %lnPM
    %lnPO = inttoptr i32 %lnPN to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnPP = load i32** %Base_Var
    %lnPQ = load i32** %Sp_Var
    %lnPR = load i32** %Hp_Var
    %lnPS = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnPO( i32* %lnPP,i32* %lnPQ,i32* %lnPR,i32 %lnPS ) nounwind
    ret void
cPv:
    %lnPT = ptrtoint %F_g_closure_struct* @F_g_closure to i32
    store i32 %lnPT, i32* %R1_Var
    %lnPU = load i32** %Base_Var
    %lnPV = getelementptr inbounds i32* %lnPU, i32 -1
    %lnPW = bitcast i32* %lnPV to i32*
    %lnPX = load i32* %lnPW
    %lnPY = inttoptr i32 %lnPX to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnPZ = load i32** %Base_Var
    %lnQ0 = load i32** %Sp_Var
    %lnQ1 = load i32** %Hp_Var
    %lnQ2 = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnPY( i32* %lnPZ,i32* %lnQ0,i32* %lnQ1,i32 %lnQ2 ) nounwind
    ret void
cPJ:
    %lnQ3 = load i32** %Base_Var
    %lnQ4 = load i32** %Sp_Var
    %lnQ5 = load i32** %Hp_Var
    %lnQ6 = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @spc_info( i32* %lnQ3,i32* %lnQ4,i32* %lnQ5,i32 %lnQ6 ) nounwind
    ret void
}



==================== LLVM Code ====================



==================== LLVM Code ====================
@__stginit_base_Prelude_ = external global [0 x i32]
define  cc 10 void @__stginit_F_(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind
{
cQB:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lnQC = ptrtoint %_module_registered_struct* @_module_registered to i32
    %lnQD = inttoptr i32 %lnQC to i32*
    %lnQE = load i32* %lnQD
    %lnQF = icmp ne i32 0, %lnQE
    br i1 %lnQF, label %cQG, label %nQH
    nQH:
    br label %cQI
cQG:
    %lnQJ = load i32** %Sp_Var
    %lnQK = getelementptr inbounds i32* %lnQJ, i32 1
    %lnQL = ptrtoint i32* %lnQK to i32
    %lnQM = inttoptr i32 %lnQL to i32*
    store i32* %lnQM, i32** %Sp_Var
    %lnQN = load i32** %Sp_Var
    %lnQO = getelementptr inbounds i32* %lnQN, i32 -1
    %lnQP = bitcast i32* %lnQO to i32*
    %lnQQ = load i32* %lnQP
    %lnQR = inttoptr i32 %lnQQ to void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32 )*
    %lnQS = load i32** %Base_Var
    %lnQT = load i32** %Sp_Var
    %lnQU = load i32** %Hp_Var
    %lnQV = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* %lnQR( i32* %lnQS,i32* %lnQT,i32* %lnQU,i32 %lnQV ) nounwind
    ret void
cQI:
    %lnQW = ptrtoint %_module_registered_struct* @_module_registered to i32
    %lnQX = inttoptr i32 %lnQW to i32*
    store i32 1, i32* %lnQX
    %lnQY = load i32** %Sp_Var
    %lnQZ = getelementptr inbounds i32* %lnQY, i32 -1
    %lnR0 = ptrtoint i32* %lnQZ to i32
    %lnR1 = inttoptr i32 %lnR0 to i32*
    store i32* %lnR1, i32** %Sp_Var
    %lnR2 = ptrtoint [0 x i32]* @__stginit_base_Prelude_ to i32
    %lnR3 = load i32** %Sp_Var
    %lnR4 = getelementptr inbounds i32* %lnR3, i32 0
    store i32 %lnR2, i32* %lnR4
    br label %cQG
}



==================== LLVM Code ====================
define  cc 10 void @__stginit_F(i32* noalias nocapture %Base_Arg,i32* noalias nocapture %Sp_Arg,i32* noalias nocapture %Hp_Arg,i32 %R1_Arg) align 4 nounwind
{
cRa:
    %Base_Var = alloca i32*, i32 1
    store i32* %Base_Arg, i32** %Base_Var
    %Sp_Var = alloca i32*, i32 1
    store i32* %Sp_Arg, i32** %Sp_Var
    %Hp_Var = alloca i32*, i32 1
    store i32* %Hp_Arg, i32** %Hp_Var
    %R1_Var = alloca i32, i32 1
    store i32 %R1_Arg, i32* %R1_Var
    %lnRb = load i32** %Base_Var
    %lnRc = load i32** %Sp_Var
    %lnRd = load i32** %Hp_Var
    %lnRe = load i32* %R1_Var
    tail call cc 10 void (i32* noalias nocapture,i32* noalias nocapture,i32* noalias nocapture,i32)* @__stginit_F_( i32* %lnRb,i32* %lnRc,i32* %lnRd,i32 %lnRe ) nounwind
    ret void
}


