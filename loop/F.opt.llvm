; ModuleID = '<stdin>'
target datalayout = "e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f32:32:32-f64:32:64-v64:64:64-v128:128:128-a0:0:64-f80:128:128-n8:16:32"

%F_g_closure_struct = type <{ i32 }>

@ghczmprim_GHCziTypes_Izh_con_info = external global [0 x i32] ; <[0 x i32]*> [#uses=1]
@F_g_closure = global %F_g_closure_struct <{ i32 ptrtoint (void (i32*, i32*, i32*, i32)* @F_g_info to i32) }> ; <%F_g_closure_struct*> [#uses=1]

declare cc10 void @stg_gc_unbx_r1(i32* noalias nocapture, i32* noalias nocapture, i32* noalias nocapture, i32) align 4

define internal cc10 void @soi_info(i32* noalias nocapture %Base_Arg, i32* noalias nocapture %Sp_Arg, i32* noalias nocapture %Hp_Arg, i32 %R1_Arg) nounwind section "__STRIP,__me1" align 4 {
cMY:
  %lnN0 = getelementptr inbounds i32* %Hp_Arg, i32 2 ; <i32*> [#uses=4]
  %lnN4 = ptrtoint i32* %lnN0 to i32              ; <i32> [#uses=2]
  %lnN6 = getelementptr inbounds i32* %Base_Arg, i32 23 ; <i32*> [#uses=1]
  %lnN8 = load i32* %lnN6                         ; <i32> [#uses=1]
  %lnN9 = icmp ugt i32 %lnN4, %lnN8               ; <i1> [#uses=1]
  br i1 %lnN9, label %cNf, label %nNg

nNg:                                              ; preds = %cMY
  %lnNj = getelementptr inbounds i32* %Hp_Arg, i32 1 ; <i32*> [#uses=1]
  store i32 ptrtoint ([0 x i32]* @ghczmprim_GHCziTypes_Izh_con_info to i32), i32* %lnNj
  store i32 %R1_Arg, i32* %lnN0
  %lnNp = add i32 %lnN4, -3                       ; <i32> [#uses=1]
  %lnNr = getelementptr inbounds i32* %Sp_Arg, i32 1 ; <i32*> [#uses=2]
  %lnNx = load i32* %lnNr                         ; <i32> [#uses=1]
  %lnNy = inttoptr i32 %lnNx to void (i32*, i32*, i32*, i32)* ; <void (i32*, i32*, i32*, i32)*> [#uses=1]
  tail call cc10 void %lnNy(i32* %Base_Arg, i32* %lnNr, i32* %lnN0, i32 %lnNp) nounwind
  ret void

cNf:                                              ; preds = %cMY
  %lnNJ = getelementptr inbounds i32* %Base_Arg, i32 28 ; <i32*> [#uses=1]
  store i32 8, i32* %lnNJ
  tail call cc10 void @stg_gc_unbx_r1(i32* %Base_Arg, i32* %Sp_Arg, i32* %lnN0, i32 %R1_Arg) nounwind
  ret void
}

define internal cc10 void @spc_info(i32* noalias nocapture %Base_Arg, i32* noalias nocapture %Sp_Arg, i32* noalias nocapture %Hp_Arg, i32 %R1_Arg) nounwind section "__STRIP,__me1" align 4 {
cOc:
  %lnOe = getelementptr inbounds i32* %Sp_Arg, i32 -1 ; <i32*> [#uses=1]
  store i32 0, i32* %lnOe
  %lnOg = getelementptr inbounds i32* %Sp_Arg, i32 -2 ; <i32*> [#uses=1]
  store i32 0, i32* %lnOg
  %lnOi = add i32 %R1_Arg, 3                      ; <i32> [#uses=1]
  %lnOj = inttoptr i32 %lnOi to i32*              ; <i32*> [#uses=2]
  %lnOk = load i32* %lnOj                         ; <i32> [#uses=1]
  %lnOm = getelementptr inbounds i32* %Sp_Arg, i32 -3 ; <i32*> [#uses=1]
  store i32 %lnOk, i32* %lnOm
  %lnOq = load i32* %lnOj                         ; <i32> [#uses=1]
  %lnOs = getelementptr inbounds i32* %Sp_Arg, i32 -4 ; <i32*> [#uses=3]
  store i32 %lnOq, i32* %lnOs
  store i32 ptrtoint (void (i32*, i32*, i32*, i32)* @soi_info to i32), i32* %Sp_Arg
  %lnDl1.i = load i32* %lnOs                      ; <i32> [#uses=6]
  %lnDn2.i = icmp eq i32 %lnDl1.i, 0              ; <i1> [#uses=1]
  br i1 %lnDn2.i, label %cDh.nDq_crit_edge.i, label %bb.nph.i

cDh.nDq_crit_edge.i:                              ; preds = %cOc
  %lnDs.phi.trans.insert.i = getelementptr inbounds i32* %Sp_Arg, i32 -2 ; <i32*> [#uses=1]
  %lnDu.pre.i = load i32* %lnDs.phi.trans.insert.i ; <i32> [#uses=1]
  %lnDw.phi.trans.insert.i = getelementptr inbounds i32* %Sp_Arg, i32 -1 ; <i32*> [#uses=1]
  %lnDy.pre.i = load i32* %lnDw.phi.trans.insert.i ; <i32> [#uses=1]
  br label %F_zdwf_info.exit

bb.nph.i:                                         ; preds = %cOc
  %lnDP.i = getelementptr inbounds i32* %Sp_Arg, i32 -3 ; <i32*> [#uses=2]
  %lnDU.i = getelementptr inbounds i32* %Sp_Arg, i32 -1 ; <i32*> [#uses=2]
  %lnE0.i = getelementptr inbounds i32* %Sp_Arg, i32 -2 ; <i32*> [#uses=2]
  %lnDP.promoted.i = load i32* %lnDP.i            ; <i32> [#uses=2]
  %tmp7.i = add i32 %lnDl1.i, -1                  ; <i32> [#uses=2]
  %tmp8.i = zext i32 %tmp7.i to i33               ; <i33> [#uses=1]
  %tmp9.i = add i32 %lnDl1.i, -2                  ; <i32> [#uses=1]
  %tmp10.i = zext i32 %tmp9.i to i33              ; <i33> [#uses=1]
  %tmp11.i = mul i33 %tmp8.i, %tmp10.i            ; <i33> [#uses=1]
  %tmp12.i = lshr i33 %tmp11.i, 1                 ; <i33> [#uses=1]
  %tmp13.i = trunc i33 %tmp12.i to i32            ; <i32> [#uses=2]
  %tmp15.i = mul i32 %lnDP.promoted.i, 5          ; <i32> [#uses=2]
  %tmp16.i = add i32 %tmp15.i, -5                 ; <i32> [#uses=1]
  %tmp17.i = mul i32 %tmp16.i, %tmp7.i            ; <i32> [#uses=1]
  %tmp4.i = mul i32 %lnDl1.i, %lnDl1.i            ; <i32> [#uses=1]
  %lnE0.promoted.i = load i32* %lnE0.i            ; <i32> [#uses=1]
  %lnDU.promoted.i = load i32* %lnDU.i            ; <i32> [#uses=1]
  %tmp20.i = mul i32 %tmp13.i, 5                  ; <i32> [#uses=1]
  %tmp.i = sub i32 %lnDP.promoted.i, %lnDl1.i     ; <i32> [#uses=1]
  %tmp5.i = add i32 %tmp4.i, 1                    ; <i32> [#uses=1]
  %tmp6.i = sub i32 %tmp5.i, %tmp13.i             ; <i32> [#uses=1]
  %tmp14.i = add i32 %tmp6.i, %lnE0.promoted.i    ; <i32> [#uses=2]
  %tmp18.i = sub i32 %tmp15.i, %tmp20.i           ; <i32> [#uses=1]
  %tmp19.i = add i32 %tmp18.i, %lnDU.promoted.i   ; <i32> [#uses=1]
  %tmp21.i = add i32 %tmp19.i, %tmp17.i           ; <i32> [#uses=2]
  store i32 %tmp.i, i32* %lnDP.i
  store i32 %tmp21.i, i32* %lnDU.i
  store i32 %tmp14.i, i32* %lnE0.i
  store i32 0, i32* %lnOs
  br label %F_zdwf_info.exit

F_zdwf_info.exit:                                 ; preds = %bb.nph.i, %cDh.nDq_crit_edge.i
  %lnDy.i = phi i32 [ %lnDy.pre.i, %cDh.nDq_crit_edge.i ], [ %tmp21.i, %bb.nph.i ] ; <i32> [#uses=1]
  %lnDu.i = phi i32 [ %lnDu.pre.i, %cDh.nDq_crit_edge.i ], [ %tmp14.i, %bb.nph.i ] ; <i32> [#uses=1]
  %lnDz.i = add i32 %lnDu.i, %lnDy.i              ; <i32> [#uses=1]
  %lnDI.i = load i32* %Sp_Arg                     ; <i32> [#uses=1]
  %lnDJ.i = inttoptr i32 %lnDI.i to void (i32*, i32*, i32*, i32)* ; <void (i32*, i32*, i32*, i32)*> [#uses=1]
  tail call cc10 void %lnDJ.i(i32* %Base_Arg, i32* %Sp_Arg, i32* %Hp_Arg, i32 %lnDz.i) nounwind
  ret void
}

define cc10 void @F_g_info(i32* noalias nocapture %Base_Arg, i32* noalias nocapture %Sp_Arg, i32* noalias nocapture %Hp_Arg, i32 %R1_Arg) nounwind section "__STRIP,__me1" align 4 {
cPl:
  %lnPn = getelementptr inbounds i32* %Sp_Arg, i32 -4 ; <i32*> [#uses=4]
  %lnPo = ptrtoint i32* %lnPn to i32              ; <i32> [#uses=1]
  %lnPq = getelementptr inbounds i32* %Base_Arg, i32 21 ; <i32*> [#uses=1]
  %lnPs = load i32* %lnPq                         ; <i32> [#uses=1]
  %lnPt = icmp ult i32 %lnPo, %lnPs               ; <i1> [#uses=1]
  br i1 %lnPt, label %cPv, label %nPw

nPw:                                              ; preds = %cPl
  %lnPA = load i32* %Sp_Arg                       ; <i32> [#uses=4]
  store i32 ptrtoint (void (i32*, i32*, i32*, i32)* @spc_info to i32), i32* %Sp_Arg
  %lnPF = and i32 %lnPA, 3                        ; <i32> [#uses=1]
  %lnPG = icmp eq i32 %lnPF, 0                    ; <i1> [#uses=1]
  br i1 %lnPG, label %nPK, label %cPJ

nPK:                                              ; preds = %nPw
  %lnPM = inttoptr i32 %lnPA to i32*              ; <i32*> [#uses=1]
  %lnPN = load i32* %lnPM                         ; <i32> [#uses=1]
  %lnPO = inttoptr i32 %lnPN to void (i32*, i32*, i32*, i32)* ; <void (i32*, i32*, i32*, i32)*> [#uses=1]
  tail call cc10 void %lnPO(i32* %Base_Arg, i32* %Sp_Arg, i32* %Hp_Arg, i32 %lnPA) nounwind
  ret void

cPv:                                              ; preds = %cPl
  %lnPV = getelementptr inbounds i32* %Base_Arg, i32 -1 ; <i32*> [#uses=1]
  %lnPX = load i32* %lnPV                         ; <i32> [#uses=1]
  %lnPY = inttoptr i32 %lnPX to void (i32*, i32*, i32*, i32)* ; <void (i32*, i32*, i32*, i32)*> [#uses=1]
  tail call cc10 void %lnPY(i32* %Base_Arg, i32* %Sp_Arg, i32* %Hp_Arg, i32 ptrtoint (%F_g_closure_struct* @F_g_closure to i32)) nounwind
  ret void

cPJ:                                              ; preds = %nPw
  %lnOe.i = getelementptr inbounds i32* %Sp_Arg, i32 -1 ; <i32*> [#uses=1]
  store i32 0, i32* %lnOe.i
  %lnOg.i = getelementptr inbounds i32* %Sp_Arg, i32 -2 ; <i32*> [#uses=1]
  store i32 0, i32* %lnOg.i
  %lnOi.i = add i32 %lnPA, 3                      ; <i32> [#uses=1]
  %lnOj.i = inttoptr i32 %lnOi.i to i32*          ; <i32*> [#uses=2]
  %lnOk.i = load i32* %lnOj.i                     ; <i32> [#uses=1]
  %lnOm.i = getelementptr inbounds i32* %Sp_Arg, i32 -3 ; <i32*> [#uses=1]
  store i32 %lnOk.i, i32* %lnOm.i
  %lnOq.i = load i32* %lnOj.i                     ; <i32> [#uses=1]
  store i32 %lnOq.i, i32* %lnPn
  store i32 ptrtoint (void (i32*, i32*, i32*, i32)* @soi_info to i32), i32* %Sp_Arg
  %lnDl1.i = load i32* %lnPn                      ; <i32> [#uses=6]
  %lnDn2.i = icmp eq i32 %lnDl1.i, 0              ; <i1> [#uses=1]
  br i1 %lnDn2.i, label %cDh.nDq_crit_edge.i, label %bb.nph.i

cDh.nDq_crit_edge.i:                              ; preds = %cPJ
  %lnDs.phi.trans.insert.i = getelementptr inbounds i32* %Sp_Arg, i32 -2 ; <i32*> [#uses=1]
  %lnDu.pre.i = load i32* %lnDs.phi.trans.insert.i ; <i32> [#uses=1]
  %lnDw.phi.trans.insert.i = getelementptr inbounds i32* %Sp_Arg, i32 -1 ; <i32*> [#uses=1]
  %lnDy.pre.i = load i32* %lnDw.phi.trans.insert.i ; <i32> [#uses=1]
  br label %F_zdwf_info.exit

bb.nph.i:                                         ; preds = %cPJ
  %lnDP.i = getelementptr inbounds i32* %Sp_Arg, i32 -3 ; <i32*> [#uses=2]
  %lnDU.i = getelementptr inbounds i32* %Sp_Arg, i32 -1 ; <i32*> [#uses=2]
  %lnE0.i = getelementptr inbounds i32* %Sp_Arg, i32 -2 ; <i32*> [#uses=2]
  %lnDP.promoted.i = load i32* %lnDP.i            ; <i32> [#uses=2]
  %tmp7.i = add i32 %lnDl1.i, -1                  ; <i32> [#uses=2]
  %tmp8.i = zext i32 %tmp7.i to i33               ; <i33> [#uses=1]
  %tmp9.i = add i32 %lnDl1.i, -2                  ; <i32> [#uses=1]
  %tmp10.i = zext i32 %tmp9.i to i33              ; <i33> [#uses=1]
  %tmp11.i = mul i33 %tmp8.i, %tmp10.i            ; <i33> [#uses=1]
  %tmp12.i = lshr i33 %tmp11.i, 1                 ; <i33> [#uses=1]
  %tmp13.i = trunc i33 %tmp12.i to i32            ; <i32> [#uses=2]
  %tmp15.i = mul i32 %lnDP.promoted.i, 5          ; <i32> [#uses=2]
  %tmp16.i = add i32 %tmp15.i, -5                 ; <i32> [#uses=1]
  %tmp17.i = mul i32 %tmp16.i, %tmp7.i            ; <i32> [#uses=1]
  %tmp4.i = mul i32 %lnDl1.i, %lnDl1.i            ; <i32> [#uses=1]
  %lnE0.promoted.i = load i32* %lnE0.i            ; <i32> [#uses=1]
  %lnDU.promoted.i = load i32* %lnDU.i            ; <i32> [#uses=1]
  %tmp20.i = mul i32 %tmp13.i, 5                  ; <i32> [#uses=1]
  %tmp.i = sub i32 %lnDP.promoted.i, %lnDl1.i     ; <i32> [#uses=1]
  %tmp5.i = add i32 %tmp4.i, 1                    ; <i32> [#uses=1]
  %tmp6.i = sub i32 %tmp5.i, %tmp13.i             ; <i32> [#uses=1]
  %tmp14.i = add i32 %tmp6.i, %lnE0.promoted.i    ; <i32> [#uses=2]
  %tmp18.i = sub i32 %tmp15.i, %tmp20.i           ; <i32> [#uses=1]
  %tmp19.i = add i32 %tmp18.i, %lnDU.promoted.i   ; <i32> [#uses=1]
  %tmp21.i = add i32 %tmp19.i, %tmp17.i           ; <i32> [#uses=2]
  store i32 %tmp.i, i32* %lnDP.i
  store i32 %tmp21.i, i32* %lnDU.i
  store i32 %tmp14.i, i32* %lnE0.i
  store i32 0, i32* %lnPn
  br label %F_zdwf_info.exit

F_zdwf_info.exit:                                 ; preds = %bb.nph.i, %cDh.nDq_crit_edge.i
  %lnDy.i = phi i32 [ %lnDy.pre.i, %cDh.nDq_crit_edge.i ], [ %tmp21.i, %bb.nph.i ] ; <i32> [#uses=1]
  %lnDu.i = phi i32 [ %lnDu.pre.i, %cDh.nDq_crit_edge.i ], [ %tmp14.i, %bb.nph.i ] ; <i32> [#uses=1]
  %lnDz.i = add i32 %lnDu.i, %lnDy.i              ; <i32> [#uses=1]
  %lnDI.i = load i32* %Sp_Arg                     ; <i32> [#uses=1]
  %lnDJ.i = inttoptr i32 %lnDI.i to void (i32*, i32*, i32*, i32)* ; <void (i32*, i32*, i32*, i32)*> [#uses=1]
  tail call cc10 void %lnDJ.i(i32* %Base_Arg, i32* %Sp_Arg, i32* %Hp_Arg, i32 %lnDz.i) nounwind
  ret void
}

define cc10 void @F_zdwf_info(i32* noalias nocapture %Base_Arg, i32* noalias nocapture %Sp_Arg, i32* noalias nocapture %Hp_Arg, i32 %R1_Arg) nounwind section "__STRIP,__me1" align 4 {
cDh:
  %lnDl1 = load i32* %Sp_Arg                      ; <i32> [#uses=6]
  %lnDn2 = icmp eq i32 %lnDl1, 0                  ; <i1> [#uses=1]
  br i1 %lnDn2, label %cDh.nDq_crit_edge, label %bb.nph

cDh.nDq_crit_edge:                                ; preds = %cDh
  %lnDs.phi.trans.insert = getelementptr inbounds i32* %Sp_Arg, i32 2 ; <i32*> [#uses=1]
  %lnDu.pre = load i32* %lnDs.phi.trans.insert    ; <i32> [#uses=1]
  %lnDw.phi.trans.insert = getelementptr inbounds i32* %Sp_Arg, i32 3 ; <i32*> [#uses=1]
  %lnDy.pre = load i32* %lnDw.phi.trans.insert    ; <i32> [#uses=1]
  br label %nDq

nDq:                                              ; preds = %bb.nph, %cDh.nDq_crit_edge
  %lnDy = phi i32 [ %lnDy.pre, %cDh.nDq_crit_edge ], [ %tmp21, %bb.nph ] ; <i32> [#uses=1]
  %lnDu = phi i32 [ %lnDu.pre, %cDh.nDq_crit_edge ], [ %tmp14, %bb.nph ] ; <i32> [#uses=1]
  %lnDz = add i32 %lnDu, %lnDy                    ; <i32> [#uses=1]
  %lnDC = getelementptr inbounds i32* %Sp_Arg, i32 4 ; <i32*> [#uses=2]
  %lnDI = load i32* %lnDC                         ; <i32> [#uses=1]
  %lnDJ = inttoptr i32 %lnDI to void (i32*, i32*, i32*, i32)* ; <void (i32*, i32*, i32*, i32)*> [#uses=1]
  tail call cc10 void %lnDJ(i32* %Base_Arg, i32* %lnDC, i32* %Hp_Arg, i32 %lnDz) nounwind
  ret void

bb.nph:                                           ; preds = %cDh
  %lnDP = getelementptr inbounds i32* %Sp_Arg, i32 1 ; <i32*> [#uses=2]
  %lnDU = getelementptr inbounds i32* %Sp_Arg, i32 3 ; <i32*> [#uses=2]
  %lnE0 = getelementptr inbounds i32* %Sp_Arg, i32 2 ; <i32*> [#uses=2]
  %lnDP.promoted = load i32* %lnDP                ; <i32> [#uses=2]
  %tmp7 = add i32 %lnDl1, -1                      ; <i32> [#uses=2]
  %tmp8 = zext i32 %tmp7 to i33                   ; <i33> [#uses=1]
  %tmp9 = add i32 %lnDl1, -2                      ; <i32> [#uses=1]
  %tmp10 = zext i32 %tmp9 to i33                  ; <i33> [#uses=1]
  %tmp11 = mul i33 %tmp8, %tmp10                  ; <i33> [#uses=1]
  %tmp12 = lshr i33 %tmp11, 1                     ; <i33> [#uses=1]
  %tmp13 = trunc i33 %tmp12 to i32                ; <i32> [#uses=2]
  %tmp15 = mul i32 %lnDP.promoted, 5              ; <i32> [#uses=2]
  %tmp16 = add i32 %tmp15, -5                     ; <i32> [#uses=1]
  %tmp17 = mul i32 %tmp16, %tmp7                  ; <i32> [#uses=1]
  %tmp4 = mul i32 %lnDl1, %lnDl1                  ; <i32> [#uses=1]
  %lnE0.promoted = load i32* %lnE0                ; <i32> [#uses=1]
  %lnDU.promoted = load i32* %lnDU                ; <i32> [#uses=1]
  %tmp20 = mul i32 %tmp13, 5                      ; <i32> [#uses=1]
  %tmp = sub i32 %lnDP.promoted, %lnDl1           ; <i32> [#uses=1]
  %tmp5 = add i32 %tmp4, 1                        ; <i32> [#uses=1]
  %tmp6 = sub i32 %tmp5, %tmp13                   ; <i32> [#uses=1]
  %tmp14 = add i32 %tmp6, %lnE0.promoted          ; <i32> [#uses=2]
  %tmp18 = sub i32 %tmp15, %tmp20                 ; <i32> [#uses=1]
  %tmp19 = add i32 %tmp18, %lnDU.promoted         ; <i32> [#uses=1]
  %tmp21 = add i32 %tmp19, %tmp17                 ; <i32> [#uses=2]
  store i32 %tmp, i32* %lnDP
  store i32 %tmp21, i32* %lnDU
  store i32 %tmp14, i32* %lnE0
  store i32 0, i32* %Sp_Arg
  br label %nDq
}
