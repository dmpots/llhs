[1 of 1] Compiling Main             ( SumFromTo2.hs, SumFromTo2.o )

==================== Cmm ====================
[section "data" { __stginit_Main:
 },
 __stginit_ZCMain()
         { update_frame: <none>
         }
 }]
 
-------------------
 
[section "data" {
     Main_enumFromTo_closure:
         const Main_enumFromTo_info;
 },
 s1Co_entry()
         { update_frame: <none>
           label: s1Co_info
           rep:HeapRep 1 ptrs 1 nonptrs { Thunk }
         }
     c1CK:
         if (Sp - 16 < SpLim) goto c1CM;
         Hp = Hp + 16;
         if (Hp > HpLim) goto c1CO;
         I64[Sp - 16] = stg_upd_frame_info;
         I64[Sp - 8] = R1;
         _s1BK::I64 = I64[R1 + 24] + 1;
         I64[Hp - 8] = ghczmprim_GHCziTypes_Izh_con_info;
         I64[Hp + 0] = _s1BK::I64;
         R2 = Hp - 7;
         R3 = I64[R1 + 16];
         Sp = Sp - 16;
         jump Main_enumFromTo_info ();
     c1CM: jump stg_gc_enter_1 ();
     c1CO:
         HpAlloc = 16;
         goto c1CM;
 },
 s1BM_ret()
         { update_frame: <none>
           label: s1BM_info
           rep:StackRep [False, True]
         }
     c1CQ:
         Hp = Hp + 56;
         if (Hp > HpLim) goto c1CT;
         _c1CU::I64 = %MO_S_Gt_W64(I64[Sp + 16], I64[R1 + 7]);
         ;
         if (_c1CU::I64 >= 1) goto c1CW;
         I64[Hp - 48] = s1Co_info;
         I64[Hp - 32] = R1;
         I64[Hp - 24] = I64[Sp + 16];
         I64[Hp - 16] = ghczmprim_GHCziTypes_ZC_con_info;
         I64[Hp - 8] = I64[Sp + 8];
         I64[Hp + 0] = Hp - 48;
         R1 = Hp - 14;
         Sp = Sp + 24;
         jump (I64[Sp + 0]) ();
     c1CX: jump stg_gc_enter_1 ();
     c1CT:
         HpAlloc = 56;
         goto c1CX;
     c1CW:
         R1 = ghczmprim_GHCziTypes_ZMZN_closure+1;
         Sp = Sp + 24;
         Hp = Hp - 56;
         jump (I64[Sp + 0]) ();
 },
 s1BI_ret()
         { update_frame: <none>
           label: s1BI_info
           rep:StackRep [False]
         }
     c1CZ:
         I64[Sp + 0] = R1;
         _c1D2::I64 = I64[Sp + 8];
         I64[Sp + 8] = I64[R1 + 7];
         R1 = _c1D2::I64;
         I64[Sp - 8] = s1BM_info;
         Sp = Sp - 8;
         if (R1 & 7 != 0) goto c1D4;
         jump I64[R1] ();
     c1D4: jump s1BM_info ();
 },
 Main_enumFromTo_entry()
         { update_frame: <none>
           label: Main_enumFromTo_info
           rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 12} }
         }
     c1D6:
         if (Sp - 24 < SpLim) goto c1D8;
         I64[Sp - 8] = R3;
         R1 = R2;
         I64[Sp - 16] = s1BI_info;
         Sp = Sp - 16;
         if (R1 & 7 != 0) goto c1Db;
         jump I64[R1] ();
     c1D8:
         R1 = Main_enumFromTo_closure;
         jump stg_gc_fun ();
     c1Db: jump s1BI_info ();
 }]
 
-------------------
 
[section "data" {
     Main_sum_closure:
         const Main_sum_info;
 },
 s1Cn_ret()
         { update_frame: <none>
           label: s1Cn_info
           rep:StackRep [False, False]
         }
     c1Dv:
         R2 = R1;
         R1 = I64[Sp + 8];
         Sp = Sp + 8;
         jump s1C4_info ();
 },
 s1C2_ret()
         { update_frame: <none>
           label: s1C2_info
           rep:StackRep [False, False, False]
         }
     c1Dx:
         I64[Sp + 0] = I64[Sp + 8];
         I64[Sp - 8] = R1;
         I64[Sp - 16] = stg_ap_pp_info;
         R2 = I64[Sp + 24];
         I64[Sp + 8] = s1Cn_info;
         Sp = Sp - 16;
         jump base_GHCziNum_zp_info ();
 },
 s1Cp_ret()
         { update_frame: <none>
           label: s1Cp_info
           rep:StackRep [False, False]
         }
     c1DB:
         _c1DC::I64 = R1 & 7;
         if (_c1DC::I64 >= 2) goto c1DD;
         R1 = I64[Sp + 8];
         Sp = Sp + 24;
         jump stg_ap_0_fast ();
     c1DD:
         I64[Sp + 0] = I64[R1 + 6];
         _c1DG::I64 = I64[Sp + 8];
         I64[Sp + 8] = I64[R1 + 14];
         R1 = _c1DG::I64;
         I64[Sp - 8] = s1C2_info;
         Sp = Sp - 8;
         jump stg_ap_0_fast ();
 },
 s1C4_ret()
         { update_frame: <none>
           label: s1C4_info
           rep:StackRep [False]
         }
     c1DI:
         I64[Sp + 0] = R2;
         I64[Sp - 8] = s1Cp_info;
         Sp = Sp - 8;
         if (R1 & 7 != 0) goto c1DL;
         jump I64[R1] ();
     c1DL: jump s1Cp_info ();
 },
 s1Cm_ret()
         { update_frame: <none>
           label: s1Cm_info
           rep:StackRep [False, False]
         }
     c1DP:
         R2 = R1;
         R1 = I64[Sp + 8];
         Sp = Sp + 8;
         jump s1C4_info ();
 },
 Main_sum_entry()
         { update_frame: <none>
           label: Main_sum_info
           rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 12} }
         }
     c1DR:
         if (Sp - 48 < SpLim) goto c1DT;
         Hp = Hp + 16;
         if (Hp > HpLim) goto c1DV;
         I64[Sp - 8] = R2;
         I64[Hp - 8] = integerzmgmp_GHCziIntegerziType_Szh_con_info;
         I64[Hp + 0] = 0;
         I64[Sp - 16] = R3;
         I64[Sp - 32] = Hp - 7;
         I64[Sp - 40] = stg_ap_p_info;
         I64[Sp - 24] = s1Cm_info;
         Sp = Sp - 40;
         jump base_GHCziNum_fromInteger_info ();
     c1DT:
         R1 = Main_sum_closure;
         jump stg_gc_fun ();
     c1DV:
         HpAlloc = 16;
         goto c1DT;
 }]
 
-------------------
 
[section "data" {
     r1Bw_closure:
         const ghczmprim_GHCziTypes_Izh_static_info;
         const 1;
 }]
 
-------------------
 
[section "relreadonly" {
     Main_root_srt:
         const Main_sum_closure;
 },
 section "data" {
     Main_root_closure:
         const Main_root_info;
         const 0;
 },
 s1Cl_ret()
         { update_frame: <none>
           label: s1Cl_info
           rep:StackRep []
         }
     c1E4:
         R2 = base_GHCziNum_zdfNumInt_closure;
         R3 = R1;
         Sp = Sp + 8;
         jump Main_sum_info ();
 },
 Main_root_entry()
         { update_frame: <none>
           label: Main_root_info
           rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} }
         }
     c1E6:
         if (Sp - 8 < SpLim) goto c1E8;
         R3 = R2;
         R2 = r1Bw_closure+1;
         I64[Sp - 8] = s1Cl_info;
         Sp = Sp - 8;
         jump Main_enumFromTo_info ();
     c1E8:
         R1 = Main_root_closure;
         jump stg_gc_fun ();
 }]
 
-------------------
 
[section "data" {
     Main_main3_closure:
         const ghczmprim_GHCziTypes_Izh_static_info;
         const 300000000;
 }]
 
-------------------
 
[section "relreadonly" {
     Main_main2_srt:
         const Main_sum_closure;
 },
 section "data" {
     Main_main2_closure:
         const Main_main2_info;
         const 0;
         const 0;
         const 0;
 },
 s1Ck_ret()
         { update_frame: <none>
           label: s1Ck_info
           rep:StackRep []
         }
     c1Ej:
         R2 = I64[R1 + 7];
         R3 = ghczmprim_GHCziTypes_ZMZN_closure+1;
         Sp = Sp + 8;
         jump base_GHCziShow_itos_info ();
 },
 Main_main2_entry()
         { update_frame: <none>
           label: Main_main2_info
           rep:HeapRep static { Thunk }
         }
     c1Em:
         if (Sp - 24 < SpLim) goto c1Eo;
         Hp = Hp + 16;
         if (Hp > HpLim) goto c1Eq;
         I64[Hp - 8] = stg_CAF_BLACKHOLE_info;
         I64[Hp + 0] = CurrentTSO;
         (_c1Er::I64,) = foreign "ccall"
           newCAF((BaseReg, PtrHint), (R1, PtrHint),
                  (Hp - 8, PtrHint))[_unsafe_call_];
         if (_c1Er::I64 == 0) goto c1Es;
         goto c1Et;
     c1Eo: jump stg_gc_enter_1 ();
     c1Eq:
         HpAlloc = 16;
         goto c1Eo;
     c1Es: jump I64[R1] ();
     c1Et:
         I64[Sp - 16] = stg_bh_upd_frame_info;
         I64[Sp - 8] = Hp - 8;
         R2 = Main_main3_closure+1;
         I64[Sp - 24] = s1Ck_info;
         Sp = Sp - 24;
         jump Main_root_info ();
 }]
 
-------------------
 
[section "relreadonly" {
     Main_main1_srt:
         const Main_main2_closure;
         const base_GHCziIOziHandleziFD_stdout_closure;
         const base_GHCziIOziHandleziText_hPutStr2_closure;
 },
 section "data" {
     Main_main1_closure:
         const Main_main1_info;
         const 0;
 },
 Main_main1_entry()
         { update_frame: <none>
           label: Main_main1_info
           rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} }
         }
     c1Ey:
         R2 = base_GHCziIOziHandleziFD_stdout_closure;
         R3 = Main_main2_closure;
         R4 = ghczmprim_GHCziTypes_True_closure+2;
         jump base_GHCziIOziHandleziText_hPutStr2_info ();
 }]
 
-------------------
 
[section "relreadonly" {
     Main_main_srt:
         const Main_main1_closure;
 },
 section "data" {
     Main_main_closure:
         const Main_main_info;
         const 0;
 },
 Main_main_entry()
         { update_frame: <none>
           label: Main_main_info
           rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} }
         }
     c1ED: jump Main_main1_info ();
 }]
 
-------------------
 
[section "relreadonly" {
     Main_main4_srt:
         const base_GHCziTopHandler_runMainIO1_closure;
         const Main_main1_closure;
 },
 section "data" {
     Main_main4_closure:
         const Main_main4_info;
         const 0;
 },
 Main_main4_entry()
         { update_frame: <none>
           label: Main_main4_info
           rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} }
         }
     c1EI:
         R2 = Main_main1_closure+1;
         jump base_GHCziTopHandler_runMainIO1_info ();
 }]
 
-------------------
 
[section "relreadonly" {
     ZCMain_main_srt:
         const Main_main4_closure;
 },
 section "data" {
     ZCMain_main_closure:
         const ZCMain_main_info;
         const 0;
 },
 ZCMain_main_entry()
         { update_frame: <none>
           label: ZCMain_main_info
           rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} }
         }
     c1EN: jump Main_main4_info ();
 }]


